diff --git a/node_modules/@graphql-mesh/json-schema/index.cjs.js b/node_modules/@graphql-mesh/json-schema/index.cjs.js
index 731a664..19c3dd6 100644
--- a/node_modules/@graphql-mesh/json-schema/index.cjs.js
+++ b/node_modules/@graphql-mesh/json-schema/index.cjs.js
@@ -649,6 +649,7 @@ class JsonSchemaHandler {
         };
     }
     async isGeneratedJSONSchemaValid({ samplePath, schemaPath }) {
+        if (this.parseString(samplePath)) return false;
         if (schemaPath || (!utils.isUrl(schemaPath) && (await utils.pathExists(schemaPath)))) {
             const [schemaFileStat, sampleFileStat] = await Promise.all([stat(schemaPath), stat(samplePath)]);
             if (schemaFileStat.mtime > sampleFileStat.mtime) {
@@ -662,7 +663,7 @@ class JsonSchemaHandler {
             if (samplePath in this.introspectionCache.schemaCache) {
                 return this.introspectionCache.schemaCache[samplePath];
             }
-            const sample = await utils.readFileOrUrlWithCache(samplePath, this.cache, { cwd: this.baseDir });
+            const sample = await this.getSample(samplePath);
             const schema = toJsonSchema(sample, {
                 required: false,
                 objects: {
@@ -685,6 +686,25 @@ class JsonSchemaHandler {
         }
         return null;
     }
+    async getSample(samplePath) {
+        let sample = this.parseString(samplePath);
+        if (!sample) {
+            sample = await utils.readFileOrUrlWithCache(samplePath, this.cache, {
+                cwd: this.baseDir,
+                headers: this.config.schemaHeaders
+            });
+        }
+        return sample;
+    }
+    parseString(jsonString) {
+        let data;
+        try {
+            data = JSON.parse(jsonString);
+        } catch (error) {
+            data = null;
+        }
+        return data;
+    }
 }
 
 module.exports = JsonSchemaHandler;
diff --git a/node_modules/@graphql-mesh/json-schema/index.esm.js b/node_modules/@graphql-mesh/json-schema/index.esm.js
index 48d24c9..5a70576 100644
--- a/node_modules/@graphql-mesh/json-schema/index.esm.js
+++ b/node_modules/@graphql-mesh/json-schema/index.esm.js
@@ -645,6 +645,7 @@ class JsonSchemaHandler {
         };
     }
     async isGeneratedJSONSchemaValid({ samplePath, schemaPath }) {
+        if (this.parseString(samplePath)) return false;
         if (schemaPath || (!isUrl(schemaPath) && (await pathExists(schemaPath)))) {
             const [schemaFileStat, sampleFileStat] = await Promise.all([stat(schemaPath), stat(samplePath)]);
             if (schemaFileStat.mtime > sampleFileStat.mtime) {
@@ -658,7 +659,7 @@ class JsonSchemaHandler {
             if (samplePath in this.introspectionCache.schemaCache) {
                 return this.introspectionCache.schemaCache[samplePath];
             }
-            const sample = await readFileOrUrlWithCache(samplePath, this.cache, { cwd: this.baseDir });
+            const sample = await this.getSample(samplePath);
             const schema = toJsonSchema(sample, {
                 required: false,
                 objects: {
@@ -681,6 +682,25 @@ class JsonSchemaHandler {
         }
         return null;
     }
+    async getSample(samplePath) {
+        let sample = this.parseString(samplePath);
+        if (!sample) {
+            sample = await utils.readFileOrUrlWithCache(samplePath, this.cache, {
+                cwd: this.baseDir,
+                headers: this.config.schemaHeaders
+            });
+        }
+        return sample;
+    }
+    parseString(jsonString) {
+        let data;
+        try {
+            data = JSON.parse(jsonString);
+        } catch (error) {
+            data = null;
+        }
+        return data;
+    }
 }
 
 export default JsonSchemaHandler;
