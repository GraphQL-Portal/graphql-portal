(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[939],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7748:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i={id:"data-source-configuration",title:"Data Source Configuration",sidebar_label:"Data Source Configuration"},c=void 0,s={unversionedId:"configuration/data-source-configuration",id:"configuration/data-source-configuration",isDocsHomePage:!1,title:"Data Source Configuration",description:"GraphQL Portal is based on GraphQL Mesh and uses it as a foundation for our own data sources.",source:"@site/docs/configuration/data-source-configuration.md",sourceDirName:"configuration",slug:"/configuration/data-source-configuration",permalink:"/configuration/data-source-configuration",editUrl:"https://github.com/graphql-portal/graphql-portal/edit/main/docs-website/docs/configuration/data-source-configuration.md",tags:[],version:"current",frontMatter:{id:"data-source-configuration",title:"Data Source Configuration",sidebar_label:"Data Source Configuration"},sidebar:"docs",previous:{title:"GraphQL API Definitions",permalink:"/configuration/api-definitions"}},u=[{value:"Adding data sources to an API Definition",id:"adding-data-sources-to-an-api-definition",children:[]},{value:"Configuration of the data source",id:"configuration-of-the-data-source",children:[]}],l={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GraphQL Portal is based on ",(0,o.kt)("a",{parentName:"p",href:"http://graphql-mesh.com/"},"GraphQL Mesh")," and uses it as a foundation for our own data sources.\nThus, at the moment there are two types of data sources available:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Those provided by GraphQL Mesh"),(0,o.kt)("li",{parentName:"ul"},"Our custom ones (which we call ",(0,o.kt)("em",{parentName:"li"},"data connectors")," in the dashboard) and which quite often are inherited from various\nGraphQL Mesh data sources.")),(0,o.kt)("h2",{id:"adding-data-sources-to-an-api-definition"},"Adding data sources to an API Definition"),(0,o.kt)("p",null,"In order to add a data source to an API, you have to specify its filename in the ",(0,o.kt)("inlineCode",{parentName:"p"},"source_config_names")," configuration option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "My First API",\n  "endpoint": "/my-first-api",\n  "source_config_names": ["my-data-source.yaml"]\n}\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Only the file name is required, the path is going to be resolved from the ",(0,o.kt)("inlineCode",{parentName:"p"},"sources_path")," option in ",(0,o.kt)("inlineCode",{parentName:"p"},"gateway.json"),"."))),(0,o.kt)("h2",{id:"configuration-of-the-data-source"},"Configuration of the data source"),(0,o.kt)("p",null,"The data source configuration file can be either ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yaml")," and follows the ",(0,o.kt)("a",{parentName:"p",href:"https://graphql-mesh.com/docs"},"GraphQL Mesh format"),"\n(in Mesh terms they are called ",(0,o.kt)("em",{parentName:"p"},"input handlers"),")."),(0,o.kt)("p",null,"Each data source has the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: MyDataSource\nhandler:\n  handlerConfigurationObject:\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"handlerConfigurationObject")," will depend on the data source."),(0,o.kt)("p",null,"For example, the simplest GraphQL proxy configuration would look like that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: SimpleGraphQLProxy\nhandler:\n  graphql:\n    endpoint: https://some-test-graphql-service.com/graphql\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/getting-started/available-data-connectors"},"Read more about the available data sources and their configuration options"),"."))}p.isMDXComponent=!0}}]);