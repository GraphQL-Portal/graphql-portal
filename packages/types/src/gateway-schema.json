{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GatewayConfig",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "hostname": {
      "type": "string",
      "description": "The hostname to bind the gateway node to."
    },
    "listen_port": {
      "type": "integer",
      "description": "The port on which the gateway will listen for the incoming connections."
    },
    "servername": {
      "type": "string",
      "description": "Should be set when used behind the load-balancer which has a _servername_ different from the gateway's _hostname_."
    },
    "pool_size": {
      "type": "integer",
      "minimum": 1,
      "description": "Number of worker processes to start. Ideally should be equal to the number of CPU Cores on the machine and should not be set to 1."
    },
    "apis_path": {
      "type": "string",
      "description": "Path to the directory with API Definition files."
    },
    "middleware_path": {
      "type": "string",
      "description": "Path to the custom middleware handlers."
    },
    "sources_path": {
      "type": "string",
      "description": "Path to the data sources configuration files (yaml or json)."
    },
    "use_dashboard_configs": {
      "type": "boolean",
      "description": "If set to _true_, the gateway will try to connect to the dashboard using the credentials in _dashboard_config_ section and get the API configurations from there."
    },
    "dashboard_config": {
      "$ref": "#/definitions/dashboard_config",
      "description": "Configuration of the connection to GraphQL Portal Dashboard."
    },
    "enable_control_api": {
      "type": "boolean",
      "description": "Enables or disables the Control API which is used to update GraphQL Schema definitions."
    },
    "control_api_config": {
      "$ref": "#/definitions/control_api_config",
      "description": "Configuration of the Control API"
    },
    "cors": {
      "$ref": "#/definitions/cors",
      "description": "Configuration of CORS requests."
    },
    "metrics": {
      "$ref": "#/definitions/metrics",
      "description": "Configuration of the analytics/metrics."
    },
    "log_format": {
      "type": "string",
      "enum": ["text", "json"],
      "default": "text",
      "description": "Sets the logging format. Can be 'text' or 'json'. JSON should be used while running in a Kubernetes pod."
    },
    "log_level": {
      "type": "string",
      "enum": ["debug", "info", "warn", "error"],
      "description": "Sets the log level. Should not be set to 'debug' in production."
    },
    "redis_connection_string": {
      "type": "string",
      "description": "Redis connection string in a format 'redis://localhost:6379'."
    },
    "request_size_limit": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ],
      "description": "This value specifies an HTTP Request size limit for a particular API Definition. Accepts numeric (in bytes) or string values, i.e. 'b' for bytes, 'kb' for kilobytes and 'mb' for megabytes (f.e., '10kb' or '10mb')."
    }
  },
  "definitions": {
    "dashboard_config": {
      "type": "object",
      "description": "Used to specify GraphQL Portal Dashboard connection settings",
      "additionalProperties": false,
      "properties": {
        "connection_string": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      },
      "required": ["connection_string", "secret"]
    },
    "control_api_config": {
      "type": "object",
      "description": "Used to specify GraphQL Portal Control API settings",
      "additionalProperties": false,
      "properties": {
        "endpoint": {
          "type": "string",
          "pattern": "^/"
        }
      }
    },
    "cors": {
      "type": "object",
      "description": "Configure CORS for all APIs in the gateway. CORS from Dashboard are enabled by default.",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables CORS requests for all APIs. CORS requests from Dashboard are enabled by default."
        },
        "origins": {
          "type": "array",
          "description": "Configures the Access-Control-Allow-Origin CORS header. Expects an Array of valid origins.",
          "items": {
            "type": "string"
          }
        },
        "methods": {
          "type": "array",
          "description": "Configures the Access-Control-Allow-Methods CORS header. Expects an array of HTTP Methods.",
          "items": {
            "type": "string",
            "enum": ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE"]
          }
        },
        "allowedHeaders": {
          "type": "array",
          "description": "Configures the Access-Control-Allow-Headers CORS header. Expects and Array of headers.",
          "items": {
            "type": "string"
          }
        },
        "exposedHeaders": {
          "type": "array",
          "description": "Configures the Access-Control-Expose-Headers CORS header.",
          "items": {
            "type": "string"
          }
        },
        "credentials": {
          "type": "boolean",
          "description": "Configures the Access-Control-Allow-Credentials CORS header."
        },
        "maxAge": {
          "type": "integer",
          "description": "Configures the Access-Control-Max-Age CORS header."
        },
        "optionsSuccessStatus": {
          "type": "integer",
          "description": "Provides a status code to use for successful OPTIONS requests, since some legacy browsers (IE11, various SmartTVs) choke on 204."
        }
      }
    },
    "metrics": {
      "type": "object",
      "description": "Used to specify GraphQL Portal metrics settings",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    }
  },
  "required": [
    "hostname",
    "listen_port",
    "use_dashboard_configs",
    "enable_control_api",
    "log_level",
    "redis_connection_string"
  ],
  "if": {
    "properties": {
      "use_dashboard_configs": {
        "enum": [false]
      }
    }
  },
  "then": {
    "required": ["apis_path", "middleware_path", "sources_path"]
  },
  "else": {}
}
