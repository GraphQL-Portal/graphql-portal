{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GatewayConfig",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "apiDefs": {
      "type": "array",
      "items": {
        "type": "object"
      }
    },
    "sources": {
      "type": "array",
      "items": {
        "type": "object"
      }
    },
    "hostname": {
      "type": "string",
      "description": "The hostname to bind the gateway node to.",
      "default": "localhost"
    },
    "listen_port": {
      "type": "integer",
      "description": "The port on which the gateway will listen for the incoming connections.",
      "default": 8080
    },
    "servername": {
      "type": "string",
      "description": "Should be set when used behind the load-balancer which has a _servername_ different from the gateway's _hostname_."
    },
    "pool_size": {
      "type": "integer",
      "minimum": 1,
      "description": "Number of worker processes to start. Ideally should be equal to the number of CPU Cores on the machine and should not be set to 1."
    },
    "apis_path": {
      "type": "string",
      "description": "Path to the directory with API Definition files.",
      "default": "./config/apis"
    },
    "middleware_path": {
      "type": "string",
      "description": "Path to the custom middleware handlers."
    },
    "sources_path": {
      "type": "string",
      "description": "Path to the data sources configuration files (yaml or json).",
      "default": "./config/sources"
    },
    "use_dashboard_configs": {
      "type": "boolean",
      "description": "If set to _true_, the gateway will try to connect to the dashboard using the credentials in _dashboard_config_ section and get the API configurations from there.",
      "default": false
    },
    "dashboard_config": {
      "$ref": "#/definitions/dashboard_config",
      "description": "Configuration of the connection to GraphQL Portal Dashboard."
    },
    "enable_control_api": {
      "type": "boolean",
      "description": "Enables or disables the Control API which is used to update GraphQL Schema definitions.",
      "default": true
    },
    "enable_metrics_recording": {
      "type": "boolean",
      "description": "Enable or disable metrics recording to Redis",
      "default": true
    },
    "control_api_config": {
      "$ref": "#/definitions/control_api_config",
      "description": "Configuration of the Control API"
    },
    "cors": {
      "$ref": "#/definitions/cors",
      "description": "Configuration of CORS requests."
    },
    "log_format": {
      "type": "string",
      "enum": ["text", "json"],
      "default": "text",
      "description": "Sets the default (console) logging format. Can be 'text' or 'json'. JSON should be used while running in a Kubernetes pod."
    },
    "log_level": {
      "type": "string",
      "enum": ["debug", "info", "warn", "error"],
      "description": "Sets the log level. Should not be set to 'debug' in production.",
      "default": "info"
    },
    "datadog_logging": {
      "$ref": "#/definitions/datadog_logging",
      "description": "Configures sending of log messages to Datadog."
    },
    "redis_connection_string": {
      "type": "string",
      "description": "(Deprecated) Redis connection string in a format 'redis://localhost:6379'."
    },
    "redis": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "connection_string": {
              "type": "string",
              "description": "Redis connection string in a format 'redis://localhost:6379'.",
              "default": "redis://localhost:6379"
            }
          },
          "required": ["connection_string"],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "is_cluster": {
              "type": "boolean",
              "default": false,
              "description": "Is connection to cluster"
            },
            "cluster_nodes": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Cluster nodes in a format 'redis://localhost:6379'."
              }
            }
          },
          "required": ["cluster_nodes", "is_cluster"],
          "additionalProperties": false
        }
      ],
      "description": "Redis connection options"
    },
    "request_size_limit": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ],
      "description": "This value specifies an HTTP Request size limit for a particular API Definition. Accepts numeric (in bytes) or string values, i.e. 'b' for bytes, 'kb' for kilobytes and 'mb' for megabytes (f.e., '10kb' or '10mb')."
    }
  },
  "definitions": {
    "dashboard_config": {
      "type": "object",
      "description": "Used to specify GraphQL Portal Dashboard connection settings",
      "additionalProperties": false,
      "properties": {
        "connection_string": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      },
      "required": ["connection_string", "secret"]
    },
    "control_api_config": {
      "type": "object",
      "description": "Used to specify GraphQL Portal Control API settings",
      "additionalProperties": false,
      "properties": {
        "endpoint": {
          "type": "string",
          "pattern": "^/",
          "default": "/control_api"
        }
      }
    },
    "cors": {
      "type": "object",
      "description": "Configure CORS for all APIs in the gateway. CORS from Dashboard are enabled by default.",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables CORS requests for all APIs. CORS requests from Dashboard are enabled by default."
        },
        "origins": {
          "type": "array",
          "description": "Configures the Access-Control-Allow-Origin CORS header. Expects an Array of valid origins.",
          "items": {
            "type": "string",
            "pattern": "[^\\/]$"
          }
        },
        "methods": {
          "type": "array",
          "description": "Configures the Access-Control-Allow-Methods CORS header. Expects an array of HTTP Methods.",
          "items": {
            "type": "string",
            "enum": ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE"]
          }
        },
        "allowedHeaders": {
          "type": "array",
          "description": "Configures the Access-Control-Allow-Headers CORS header. Expects and Array of headers.",
          "items": {
            "type": "string"
          }
        },
        "exposedHeaders": {
          "type": "array",
          "description": "Configures the Access-Control-Expose-Headers CORS header.",
          "items": {
            "type": "string"
          }
        },
        "credentials": {
          "type": "boolean",
          "description": "Configures the Access-Control-Allow-Credentials CORS header."
        },
        "maxAge": {
          "type": "integer",
          "description": "Configures the Access-Control-Max-Age CORS header."
        },
        "optionsSuccessStatus": {
          "type": "integer",
          "description": "Provides a status code to use for successful OPTIONS requests, since some legacy browsers (IE11, various SmartTVs) choke on 204."
        }
      }
    },
    "datadog_logging": {
      "type": "object",
      "description": "Configures sending of log messages to Datadog. If enabled will log to console and Datadog.",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable or disable logging to Datadog. Defaults to false.",
          "default": false
        },
        "apiKey": {
          "type": "string",
          "description": "Datadog API key of your application"
        },
        "host": {
          "type": "string",
          "description": "Host of the Datadog TCP (TLS) intake. Defaults to the US server (intake.logs.datadoghq.com)."
        },
        "port": {
          "type": "number",
          "description": "Port of the Datadog TCP (TLS) intake. Defaults to 10516."
        },
        "environment": {
          "type": "string",
          "description": "Adds an environment attribute to Datadog logs. Empty by default."
        },
        "tags": {
          "type": "array",
          "description": "Allows transport level tagging in Datadog. Each tag should follow the format <KEY>:<VALUE>. For more information see https://docs.datadoghq.com/getting_started/tagging/.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["enabled", "apiKey"]
    }
  }
}
