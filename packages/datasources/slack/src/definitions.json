{
  "openapi": "3.0.1",
  "info": {
    "title": "Slack Web API",
    "description": "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.",
    "contact": {
      "name": "Slack developer relations",
      "url": "https://api.slack.com/support"
    },
    "version": "1.7.0"
  },
  "externalDocs": {
    "description": "Learn more about the Slack Web API",
    "url": "https://api.slack.com/web"
  },
  "servers": [
    {
      "url": "https://slack.com/api"
    }
  ],
  "tags": [],
  "paths": {
    "/admin.apps.approve": {
      "post": {
        "tags": ["admin.apps", "admin"],
        "description": "Approve an app for installation on a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.approve"
        },
        "operationId": "admin_apps_approve",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.apps:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "The id of the app to approve."
                  },
                  "request_id": {
                    "type": "string",
                    "description": "The id of the request to approve."
                  },
                  "team_id": {
                    "type": "string"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "The id of the app to approve."
                  },
                  "request_id": {
                    "type": "string",
                    "description": "The id of the request to approve."
                  },
                  "team_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.apps:write"]
          }
        ]
      }
    },
    "/admin.apps.approved.list": {
      "get": {
        "tags": ["admin.apps.approved", "admin"],
        "description": "List approved apps for an org or workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.approved.list"
        },
        "operationId": "admin_apps_approved_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.apps:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enterprise_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "approved_apps": [
                    {
                      "app": {
                        "additional_info": "",
                        "app_directory_url": "https://myteam.enterprise.slack.com/apps/A0W7UKG8E-my-test-app",
                        "app_homepage_url": "https://www.slack.com",
                        "description": "test app",
                        "help_url": "https://www.slack.com",
                        "icons": {
                          "image_1024": "https://3026743124446w96_2bd4ea1ad1f89a23c242_1024.png",
                          "image_128": "https://30267341249446w6_2bd4ea1ad1f89a23c242_128.png",
                          "image_192": "https://30267431249446w6_2bd4ea1ad1f89a23c242_192.png",
                          "image_32": "https://302674312496446w_2bd4ea1ad1f89a23c242_32.png",
                          "image_36": "https://302674312496446w_2bd4ea1ad1f89a23c242_36.png",
                          "image_48": "https://302674312496446w_2bd4ea1ad1f89a23c242_48.png",
                          "image_512": "https://30267431249446w6_2bd4ea1ad1f89a23c242_512.png",
                          "image_64": "https://302674312496446w_2bd4ea1ad1f89a23c242_64.png",
                          "image_72": "https://302674312496446w_2bd4ea1ad1f89a23c242_72.png",
                          "image_96": "https://302674312496446w_2bd4ea1ad1f89a23c242_96.png",
                          "image_original": "https://302674446w12496_2bd4ea1ad1f89a23c242_original.png"
                        },
                        "id": "A0W7UKG8E",
                        "is_app_directory_approved": false,
                        "is_internal": false,
                        "name": "My Test App",
                        "privacy_policy_url": "https://www.slack.com"
                      },
                      "date_updated": 1574296707,
                      "last_resolved_by": {
                        "actor_id": "W0G82F4FD",
                        "actor_type": "user"
                      },
                      "scopes": [
                        {
                          "description": "Add the ability for people to direct message or mention @my_test_app",
                          "is_sensitive": true,
                          "name": "bot",
                          "token_type": "bot"
                        }
                      ]
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": ""
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.apps:read"]
          }
        ]
      }
    },
    "/admin.apps.requests.list": {
      "get": {
        "tags": ["admin.apps.requests", "admin"],
        "description": "List app requests for a team/workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.requests.list"
        },
        "operationId": "admin_apps_requests_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.apps:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "app_requests": [
                    {
                      "app": {
                        "additional_info": "",
                        "app_directory_url": "https://acmecorp.slack.com/apps/A061BL8RQ0-test-app",
                        "app_homepage_url": "",
                        "description": "",
                        "help_url": "",
                        "icons": {
                          "image_1024": "/cdn/15258203/img/testapp/service_1024.png",
                          "image_128": "/cdn/157258203/img/testapp/service_128.png",
                          "image_192": "/cdn/157258203/img/testapp/service_192.png",
                          "image_32": "/cdn/157658203/img/testapp/service_32.png",
                          "image_36": "/cdn/157658203/img/testapp/service_36.png",
                          "image_48": "/cdn/157658203/img/testapp/service_48.png",
                          "image_512": "/cdn/15758203/img/testapp/service_512.png",
                          "image_64": "/cdn/157658203/img/testapp/service_64.png",
                          "image_72": "/cdn/157658203/img/testapp/service_72.png",
                          "image_96": "/cdn/157658203/img/testapp/service_96.png"
                        },
                        "id": "A061BL8RQ0",
                        "is_app_directory_approved": true,
                        "is_internal": false,
                        "name": "Test App",
                        "privacy_policy_url": "https://testapp.com/privacy"
                      },
                      "date_created": 1578956327,
                      "id": "Ar0XJGFLMLS",
                      "message": "test test again",
                      "scopes": [
                        {
                          "description": "Post messages to specific channels in Slack",
                          "is_sensitive": false,
                          "name": "incoming-webhook",
                          "token_type": "user"
                        }
                      ],
                      "team": {
                        "domain": "acmecorp",
                        "id": "T0M94LNUCR",
                        "name": "Acme Corp"
                      },
                      "user": {
                        "email": "janedoe@example.com",
                        "id": "W08RA9G5HR",
                        "name": "Jane Doe"
                      }
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": ""
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "missing_scope",
                  "needed": "admin.apps:read",
                  "ok": false,
                  "provided": "read,client,admin,identify,post,apps"
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.apps:read"]
          }
        ]
      }
    },
    "/admin.apps.restrict": {
      "post": {
        "tags": ["admin.apps", "admin"],
        "description": "Restrict an app for installation on a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.restrict"
        },
        "operationId": "admin_apps_restrict",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.apps:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "The id of the app to restrict."
                  },
                  "request_id": {
                    "type": "string",
                    "description": "The id of the request to restrict."
                  },
                  "team_id": {
                    "type": "string"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "The id of the app to restrict."
                  },
                  "request_id": {
                    "type": "string",
                    "description": "The id of the request to restrict."
                  },
                  "team_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.apps:write"]
          }
        ]
      }
    },
    "/admin.apps.restricted.list": {
      "get": {
        "tags": ["admin.apps.restricted", "admin"],
        "description": "List restricted apps for an org or workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.apps.restricted.list"
        },
        "operationId": "admin_apps_restricted_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.apps:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enterprise_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": ""
                  },
                  "restricted_apps": [
                    {
                      "app": {
                        "additional_info": "",
                        "app_directory_url": "https://myteam.enterprise.slack.com/apps/A0FDLP8M2L-my-test-app",
                        "app_homepage_url": "https://example.com",
                        "description": "A fun test app for Slack",
                        "help_url": "https://example.com",
                        "icons": {
                          "image_1024": "https://1433265338rl878408_eb57dbc818daa4ba15d6_1024.png",
                          "image_128": "https://4332653438rl87808_eb57dbc818daa4ba15d6_128.png",
                          "image_192": "https://4332653438rl87808_eb57dbc818daa4ba15d6_192.png",
                          "image_32": "https://143326534038rl8788_eb57dbc818daa4ba15d6_32.png",
                          "image_36": "https://143326534038rl8788_eb57dbc818daa4ba15d6_36.png",
                          "image_48": "https://143326534038rl8788_eb57dbc818daa4ba15d6_48.png",
                          "image_512": "https://4332653438rl87808_eb57dbc818daa4ba15d6_512.png",
                          "image_64": "https://143326534038rl8788_eb57dbc818daa4ba15d6_64.png",
                          "image_72": "https://143326534038rl8788_eb57dbc818daa4ba15d6_72.png",
                          "image_96": "https://143326534038rl8788_eb57dbc818daa4ba15d6_96.png",
                          "image_original": "https://143338rl8782653408_eb57dbc818daa4ba15d6_original.png"
                        },
                        "id": "A0FDLP8M2L",
                        "is_app_directory_approved": true,
                        "is_internal": false,
                        "name": "My Test App",
                        "privacy_policy_url": "https://example.com"
                      },
                      "date_updated": 1574296721,
                      "last_resolved_by": {
                        "actor_id": "W0G82LMFD",
                        "actor_type": "user"
                      },
                      "scopes": [
                        {
                          "description": "Upload, edit, and delete files on the user‟s behalf",
                          "is_sensitive": true,
                          "name": "files:write:user",
                          "token_type": "user"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.apps:read"]
          }
        ]
      }
    },
    "/admin.conversations.archive": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Archive a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.archive"
        },
        "operationId": "admin_conversations_archive",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to archive."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to archive."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.archive schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.archive"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.archive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.archive"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.convertToPrivate": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Convert a public channel to a private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.convertToPrivate"
        },
        "operationId": "admin_conversations_convertToPrivate",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to convert to private."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to convert to private."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.convertToPrivate schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.convertToPrivate"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.convertToPrivate error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.convertToPrivate"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.create": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Create a public or private channel-based conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.create"
        },
        "operationId": "admin_conversations_create",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["is_private", "name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the public or private channel to create."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the public or private channel to create."
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "When `true`, creates a private channel instead of a public channel"
                  },
                  "org_wide": {
                    "type": "boolean",
                    "description": "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["is_private", "name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the public or private channel to create."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the public or private channel to create."
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "When `true`, creates a private channel instead of a public channel"
                  },
                  "org_wide": {
                    "type": "boolean",
                    "description": "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.create schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.create"
                },
                "example": {
                  "channel_id": "C12345",
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.create error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.create"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.delete": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Delete a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.delete"
        },
        "operationId": "admin_conversations_delete",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to delete."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to delete."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.delete schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.delete"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.delete error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.delete"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.disconnectShared": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Disconnect a connected channel from one or more workspaces.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.disconnectShared"
        },
        "operationId": "admin_conversations_disconnectShared",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to be disconnected from some workspaces."
                  },
                  "leaving_team_ids": {
                    "type": "string",
                    "description": "The team to be removed from the channel. Currently only a single team id can be specified."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to be disconnected from some workspaces."
                  },
                  "leaving_team_ids": {
                    "type": "string",
                    "description": "The team to be removed from the channel. Currently only a single team id can be specified."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.rename schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.disconnectShared"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.disconnectShared error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.disconnectShared"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.ekm.listOriginalConnectedChannelInfo": {
      "get": {
        "tags": ["admin.conversations.ekm", "admin"],
        "description": "List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo"
        },
        "operationId": "admin_conversations_ekm_listOriginalConnectedChannelInfo",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.conversations:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_ids",
            "in": "query",
            "description": "A comma-separated list of channels to filter to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_ids",
            "in": "query",
            "description": "A comma-separated list of the workspaces to which the channels you would like returned belong.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "channels": [
                    {
                      "id": "string",
                      "internal_team_ids": "array",
                      "original_connected_channel_id": "string",
                      "original_connected_host_id": "string"
                    }
                  ],
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:read"]
          }
        ]
      }
    },
    "/admin.conversations.getConversationPrefs": {
      "get": {
        "tags": ["admin.conversations", "admin"],
        "description": "Get conversation preferences for a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.getConversationPrefs"
        },
        "operationId": "admin_conversations_getConversationPrefs",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "query",
            "description": "The channel to get preferences for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.getConversationPrefs schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.getConversationPrefs"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.unarchive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.getConversationPrefs"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:read"]
          }
        ]
      }
    },
    "/admin.conversations.getTeams": {
      "get": {
        "tags": ["admin.conversations", "admin"],
        "description": "Get all the workspaces a given public or private channel is connected to within this Enterprise org.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.getTeams"
        },
        "operationId": "admin_conversations_getTeams",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "query",
            "description": "The channel to determine connected workspaces within the organization for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.getTeams schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.getTeams"
                },
                "example": {
                  "ok": true,
                  "teams": ["T1234", "T5678"]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.getTeams error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.getTeams"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:read"]
          }
        ]
      }
    },
    "/admin.conversations.invite": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Invite a user to a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.invite"
        },
        "operationId": "admin_conversations_invite",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id", "user_ids"],
                "properties": {
                  "user_ids": {
                    "type": "string",
                    "description": "The users to invite."
                  },
                  "channel_id": {
                    "type": "string",
                    "description": "The channel that the users will be invited to."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id", "user_ids"],
                "properties": {
                  "user_ids": {
                    "type": "string",
                    "description": "The users to invite."
                  },
                  "channel_id": {
                    "type": "string",
                    "description": "The channel that the users will be invited to."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.invite schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.invite"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.invite error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.invite"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.rename": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Rename a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.rename"
        },
        "operationId": "admin_conversations_rename",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id", "name"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to rename."
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id", "name"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to rename."
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.rename schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.rename"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.unarchive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.rename"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.restrictAccess.addGroup": {
      "post": {
        "tags": ["admin.conversations.restrictAccess", "admin"],
        "description": "Add an allowlist of IDP groups for accessing a channel",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup"
        },
        "operationId": "admin_conversations_restrictAccess_addGroup",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id", "group_id", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.conversations:write`"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
                  },
                  "group_id": {
                    "type": "string",
                    "description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel."
                  },
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to link this group to."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.restrictAccess.listGroups": {
      "get": {
        "tags": ["admin.conversations.restrictAccess", "admin"],
        "description": "List all IDP Groups linked to a channel",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups"
        },
        "operationId": "admin_conversations_restrictAccess_listGroups",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.conversations:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "group_ids": ["YOUR_GROUP_ID"],
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:read"]
          }
        ]
      }
    },
    "/admin.conversations.restrictAccess.removeGroup": {
      "post": {
        "tags": ["admin.conversations.restrictAccess", "admin"],
        "description": "Remove a linked IDP group linked from a private channel",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup"
        },
        "operationId": "admin_conversations_restrictAccess_removeGroup",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id", "group_id", "team_id", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.conversations:write`"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
                  },
                  "group_id": {
                    "type": "string",
                    "description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel."
                  },
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to remove the linked group from."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.search": {
      "get": {
        "tags": ["admin.conversations", "admin"],
        "description": "Search for public or private channels in an Enterprise organization.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.search"
        },
        "operationId": "admin_conversations_search",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_ids",
            "in": "query",
            "description": "Comma separated string of team IDs, signifying the workspaces to search through.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Name of the the channel to query by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_channel_types",
            "in": "query",
            "description": "The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.search schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.search"
                },
                "example": {
                  "channels": [
                    {
                      "created": 1449252889,
                      "creator": "U012A3CDE",
                      "id": "C012AB3CD",
                      "is_archived": false,
                      "is_channel": true,
                      "is_ext_shared": false,
                      "is_general": true,
                      "is_group": false,
                      "is_im": false,
                      "is_member": true,
                      "is_mpim": false,
                      "is_org_shared": false,
                      "is_pending_ext_shared": false,
                      "is_private": false,
                      "is_shared": false,
                      "name": "general",
                      "name_normalized": "general",
                      "num_members": 4,
                      "pending_shared": [],
                      "previous_names": [],
                      "purpose": {
                        "creator": "",
                        "last_set": 0,
                        "value": "This channel is for team-wide communication and announcements. All team members are in this channel."
                      },
                      "topic": {
                        "creator": "",
                        "last_set": 0,
                        "value": "Company-wide announcements and work-based matters"
                      },
                      "unlinked": 0
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "dGVhbTpDMDYxRkE1UEI="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.search error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.search"
                },
                "example": {
                  "error": "not_an_enterprise",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:read"]
          }
        ]
      }
    },
    "/admin.conversations.setConversationPrefs": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Set the posting permissions for a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.setConversationPrefs"
        },
        "operationId": "admin_conversations_setConversationPrefs",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id", "prefs"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to set the prefs for"
                  },
                  "prefs": {
                    "type": "string",
                    "description": "The prefs for this channel in a stringified JSON format."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id", "prefs"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to set the prefs for"
                  },
                  "prefs": {
                    "type": "string",
                    "description": "The prefs for this channel in a stringified JSON format."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.setConversationPrefs schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.setConversationPrefs"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.setConversationPrefs error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.setConversationPrefs"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.setTeams": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Set the workspaces in an Enterprise grid org that connect to a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.setTeams"
        },
        "operationId": "admin_conversations_setTeams",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The encoded `channel_id` to add or remove to workspaces."
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel."
                  },
                  "target_team_ids": {
                    "type": "string",
                    "description": "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide."
                  },
                  "org_channel": {
                    "type": "boolean",
                    "description": "True if channel has to be converted to an org channel"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The encoded `channel_id` to add or remove to workspaces."
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel."
                  },
                  "target_team_ids": {
                    "type": "string",
                    "description": "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide."
                  },
                  "org_channel": {
                    "type": "boolean",
                    "description": "True if channel has to be converted to an org channel"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.conversations.unarchive": {
      "post": {
        "tags": ["admin.conversations", "admin"],
        "description": "Unarchive a public or private channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.conversations.unarchive"
        },
        "operationId": "admin_conversations_unarchive",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.conversations:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to unarchive."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_id"],
                "properties": {
                  "channel_id": {
                    "type": "string",
                    "description": "The channel to unarchive."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.unarchive schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of admin.conversations.unarchive"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "admin.conversations.unarchive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from admin.conversations.unarchive"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.conversations:write"]
          }
        ]
      }
    },
    "/admin.emoji.add": {
      "post": {
        "tags": ["admin.emoji", "admin"],
        "description": "Add an emoji.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.add"
        },
        "operationId": "admin_emoji_add",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["name", "token", "url"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.teams:write`"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.emoji.addAlias": {
      "post": {
        "tags": ["admin.emoji", "admin"],
        "description": "Add an emoji alias.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.addAlias"
        },
        "operationId": "admin_emoji_addAlias",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["alias_for", "name", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.teams:write`"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included."
                  },
                  "alias_for": {
                    "type": "string",
                    "description": "The alias of the emoji."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.emoji.list": {
      "get": {
        "tags": ["admin.emoji", "admin"],
        "description": "List emoji for an Enterprise Grid organization.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.list"
        },
        "operationId": "admin_emoji_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "cache_ts": "1575283387.000000",
                  "categories": [
                    {
                      "emoji_names": ["grinning", "grin", "joy", "etc etc ..."],
                      "name": "Smileys & People"
                    }
                  ],
                  "categories_version": "5",
                  "emoji": {
                    "black_square": "alias:black_large_square",
                    "bowtie": "https://emoji.slack-edge.com/T9TK3CUKW/bowtie/f3ec6f2bb0.png",
                    "cubimal_chick": "https://emoji.slack-edge.com/T9TK3CUKW/cubimal_chick/85961c43d7.png",
                    "dusty_stick": "https://emoji.slack-edge.com/T9TK3CUKW/dusty_stick/6177a62312.png",
                    "glitch_crab": "https://emoji.slack-edge.com/T9TK3CUKW/glitch_crab/db049f1f9c.png",
                    "piggy": "https://emoji.slack-edge.com/T9TK3CUKW/piggy/b7762ee8cd.png",
                    "pride": "https://emoji.slack-edge.com/T9TK3CUKW/pride/56b1bd3388.png",
                    "shipit": "alias:squirrel",
                    "simple_smile": {
                      "apple": "https://a.slack-edge.com/80588/img/emoji_2017_12_06/apple/simple_smile.png",
                      "google": "https://a.slack-edge.com/80588/img/emoji_2017_12_06/google/simple_smile.png"
                    },
                    "slack": "https://emoji.slack-edge.com/T9TK3CUKW/slack/7d462d2443.png",
                    "slack_call": "https://emoji.slack-edge.com/T9TK3CUKW/slack_call/b81fffd6dd.png",
                    "squirrel": "https://emoji.slack-edge.com/T9TK3CUKW/squirrel/465f40c0e0.png",
                    "thumbsup_all": "https://emoji.slack-edge.com/T9TK3CUKW/thumbsup_all/50096a1020.gif",
                    "white_square": "alias:white_large_square"
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:read"]
          }
        ]
      }
    },
    "/admin.emoji.remove": {
      "post": {
        "tags": ["admin.emoji", "admin"],
        "description": "Remove an emoji across an Enterprise Grid organization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.remove"
        },
        "operationId": "admin_emoji_remove",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["name", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.teams:write`"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.emoji.rename": {
      "post": {
        "tags": ["admin.emoji", "admin"],
        "description": "Rename an emoji.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.emoji.rename"
        },
        "operationId": "admin_emoji_rename",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["name", "new_name", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.teams:write`"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included."
                  },
                  "new_name": {
                    "type": "string",
                    "description": "The new name of the emoji."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.inviteRequests.approve": {
      "post": {
        "tags": ["admin.inviteRequests", "admin"],
        "description": "Approve a workspace invite request.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.approve"
        },
        "operationId": "admin_inviteRequests_approve",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.invites:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["invite_request_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace where the invite request was made."
                  },
                  "invite_request_id": {
                    "type": "string",
                    "description": "ID of the request to invite."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["invite_request_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace where the invite request was made."
                  },
                  "invite_request_id": {
                    "type": "string",
                    "description": "ID of the request to invite."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.invites:write"]
          }
        ]
      }
    },
    "/admin.inviteRequests.approved.list": {
      "get": {
        "tags": ["admin.inviteRequests.approved", "admin"],
        "description": "List all approved workspace invite requests.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.approved.list"
        },
        "operationId": "admin_inviteRequests_approved_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.invites:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "ID for the workspace where the invite requests were made.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Value of the `next_cursor` field sent as part of the previous API response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.invites:read"]
          }
        ]
      }
    },
    "/admin.inviteRequests.denied.list": {
      "get": {
        "tags": ["admin.inviteRequests.denied", "admin"],
        "description": "List all denied workspace invite requests.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.denied.list"
        },
        "operationId": "admin_inviteRequests_denied_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.invites:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "ID for the workspace where the invite requests were made.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Value of the `next_cursor` field sent as part of the previous api response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.invites:read"]
          }
        ]
      }
    },
    "/admin.inviteRequests.deny": {
      "post": {
        "tags": ["admin.inviteRequests", "admin"],
        "description": "Deny a workspace invite request.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.deny"
        },
        "operationId": "admin_inviteRequests_deny",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.invites:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["invite_request_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace where the invite request was made."
                  },
                  "invite_request_id": {
                    "type": "string",
                    "description": "ID of the request to invite."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["invite_request_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace where the invite request was made."
                  },
                  "invite_request_id": {
                    "type": "string",
                    "description": "ID of the request to invite."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.invites:write"]
          }
        ]
      }
    },
    "/admin.inviteRequests.list": {
      "get": {
        "tags": ["admin.inviteRequests", "admin"],
        "description": "List all pending workspace invite requests.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.inviteRequests.list"
        },
        "operationId": "admin_inviteRequests_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.invites:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "ID for the workspace where the invite requests were made.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Value of the `next_cursor` field sent as part of the previous API response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.invites:read"]
          }
        ]
      }
    },
    "/admin.teams.admins.list": {
      "get": {
        "tags": ["admin.teams.admins", "admin"],
        "description": "List all of the admins on a given workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.admins.list"
        },
        "operationId": "admin_teams_admins_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "admin_ids": ["U1234"],
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:read"]
          }
        ]
      }
    },
    "/admin.teams.create": {
      "post": {
        "tags": ["admin.teams", "admin"],
        "description": "Create an Enterprise team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.create"
        },
        "operationId": "admin_teams_create",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_domain", "team_name"],
                "properties": {
                  "team_domain": {
                    "type": "string",
                    "description": "Team domain (for example, slacksoftballteam)."
                  },
                  "team_name": {
                    "type": "string",
                    "description": "Team name (for example, Slack Softball Team)."
                  },
                  "team_description": {
                    "type": "string",
                    "description": "Description for the team."
                  },
                  "team_discoverability": {
                    "type": "string",
                    "description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_domain", "team_name"],
                "properties": {
                  "team_domain": {
                    "type": "string",
                    "description": "Team domain (for example, slacksoftballteam)."
                  },
                  "team_name": {
                    "type": "string",
                    "description": "Team name (for example, Slack Softball Team)."
                  },
                  "team_description": {
                    "type": "string",
                    "description": "Description for the team."
                  },
                  "team_discoverability": {
                    "type": "string",
                    "description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "team": "T12345"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.teams.list": {
      "get": {
        "tags": ["admin.teams", "admin"],
        "description": "List all teams on an Enterprise organization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.list"
        },
        "operationId": "admin_teams_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 100 both inclusive.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "teams": [
                    {
                      "discoverability": "hidden",
                      "id": "T1234",
                      "name": "My Team",
                      "primary_owner": {
                        "email": "bront@slack.com",
                        "user_id": "W1234"
                      },
                      "team_url": "https://subarachnoid.slack.com/"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:read"]
          }
        ]
      }
    },
    "/admin.teams.owners.list": {
      "get": {
        "tags": ["admin.teams.owners", "admin"],
        "description": "List all of the owners on a given workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.owners.list"
        },
        "operationId": "admin_teams_owners_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "owner_ids": ["U1234"]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:read"]
          }
        ]
      }
    },
    "/admin.teams.settings.info": {
      "get": {
        "tags": ["admin.teams.settings", "admin"],
        "description": "Fetch information about settings in a workspace",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.info"
        },
        "operationId": "admin_teams_settings_info",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "team": {
                    "default_channels": "array",
                    "domain": "string",
                    "email_domain": "string",
                    "enterprise_id": "string",
                    "enterprise_name": "string",
                    "icon": "array",
                    "id": "string",
                    "name": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:read"]
          }
        ]
      }
    },
    "/admin.teams.settings.setDefaultChannels": {
      "post": {
        "tags": ["admin.teams.settings", "admin"],
        "description": "Set the default channels of a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setDefaultChannels"
        },
        "operationId": "admin_teams_settings_setDefaultChannels",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_ids", "team_id", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.teams:write`"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace to set the default channel for."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "An array of channel IDs."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.teams.settings.setDescription": {
      "post": {
        "tags": ["admin.teams.settings", "admin"],
        "description": "Set the description of a given workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setDescription"
        },
        "operationId": "admin_teams_settings_setDescription",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["description", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace to set the description for."
                  },
                  "description": {
                    "type": "string",
                    "description": "The new description for the workspace."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["description", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace to set the description for."
                  },
                  "description": {
                    "type": "string",
                    "description": "The new description for the workspace."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.teams.settings.setDiscoverability": {
      "post": {
        "tags": ["admin.teams.settings", "admin"],
        "description": "An API method that allows admins to set the discoverability of a given workspace",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setDiscoverability"
        },
        "operationId": "admin_teams_settings_setDiscoverability",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["discoverability", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID of the workspace to set discoverability on."
                  },
                  "discoverability": {
                    "type": "string",
                    "description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["discoverability", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID of the workspace to set discoverability on."
                  },
                  "discoverability": {
                    "type": "string",
                    "description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.teams.settings.setIcon": {
      "post": {
        "tags": ["admin.teams.settings", "admin"],
        "description": "Sets the icon of a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setIcon"
        },
        "operationId": "admin_teams_settings_setIcon",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["image_url", "team_id", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `admin.teams:write`"
                  },
                  "image_url": {
                    "type": "string",
                    "description": "Image URL for the icon"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace to set the icon for."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.teams.settings.setName": {
      "post": {
        "tags": ["admin.teams.settings", "admin"],
        "description": "Set the name of a given workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.teams.settings.setName"
        },
        "operationId": "admin_teams_settings_setName",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["name", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace to set the name for."
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name of the workspace."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["name", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID for the workspace to set the name for."
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name of the workspace."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.usergroups.addChannels": {
      "post": {
        "tags": ["admin.usergroups", "admin"],
        "description": "Add one or more default channels to an IDP group.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.usergroups.addChannels"
        },
        "operationId": "admin_usergroups_addChannels",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_ids", "usergroup_id"],
                "properties": {
                  "usergroup_id": {
                    "type": "string",
                    "description": "ID of the IDP group to add default channels for."
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace to add default channels in."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "Comma separated string of channel IDs."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_ids", "usergroup_id"],
                "properties": {
                  "usergroup_id": {
                    "type": "string",
                    "description": "ID of the IDP group to add default channels for."
                  },
                  "team_id": {
                    "type": "string",
                    "description": "The workspace to add default channels in."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "Comma separated string of channel IDs."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if the token provided is not associated with an Org Admin or Owner",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "not_an_admin",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.usergroups:write"]
          }
        ]
      }
    },
    "/admin.usergroups.addTeams": {
      "post": {
        "tags": ["admin.usergroups", "admin"],
        "description": "Associate one or more default workspaces with an organization-wide IDP group.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.usergroups.addTeams"
        },
        "operationId": "admin_usergroups_addTeams",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.teams:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_ids", "usergroup_id"],
                "properties": {
                  "usergroup_id": {
                    "type": "string",
                    "description": "An encoded usergroup (IDP Group) ID."
                  },
                  "team_ids": {
                    "type": "string",
                    "description": "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token."
                  },
                  "auto_provision": {
                    "type": "boolean",
                    "description": "When `true`, this method automatically creates new workspace accounts for the IDP group members."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_ids", "usergroup_id"],
                "properties": {
                  "usergroup_id": {
                    "type": "string",
                    "description": "An encoded usergroup (IDP Group) ID."
                  },
                  "team_ids": {
                    "type": "string",
                    "description": "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token."
                  },
                  "auto_provision": {
                    "type": "boolean",
                    "description": "When `true`, this method automatically creates new workspace accounts for the IDP group members."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.teams:write"]
          }
        ]
      }
    },
    "/admin.usergroups.listChannels": {
      "get": {
        "tags": ["admin.usergroups", "admin"],
        "description": "List the channels linked to an org-level IDP group (user group).",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.usergroups.listChannels"
        },
        "operationId": "admin_usergroups_listChannels",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.usergroups:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usergroup_id",
            "in": "query",
            "description": "ID of the IDP group to list default channels for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "ID of the the workspace.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_num_members",
            "in": "query",
            "description": "Flag to include or exclude the count of members per channel.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "channels": [
                    {
                      "id": "C024BE91L",
                      "name": "fun",
                      "num_members": 34,
                      "team_id": "T024BE911"
                    },
                    {
                      "id": "C024BE91K",
                      "name": "more fun",
                      "team_id": "T024BE912"
                    },
                    {
                      "id": "C024BE91M",
                      "is_redacted": true,
                      "name": "public-channel",
                      "num_members": 34,
                      "team_id": "T024BE911"
                    },
                    {
                      "id": "C024BE91N",
                      "name": "some more fun",
                      "team_id": "T024BE921"
                    }
                  ],
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if the token provided is not associated with an Org Admin or Owner",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "not_an_admin",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.usergroups:read"]
          }
        ]
      }
    },
    "/admin.usergroups.removeChannels": {
      "post": {
        "tags": ["admin.usergroups", "admin"],
        "description": "Remove one or more default channels from an org-level IDP group (user group).",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.usergroups.removeChannels"
        },
        "operationId": "admin_usergroups_removeChannels",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_ids", "usergroup_id"],
                "properties": {
                  "usergroup_id": {
                    "type": "string",
                    "description": "ID of the IDP Group"
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "Comma-separated string of channel IDs"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_ids", "usergroup_id"],
                "properties": {
                  "usergroup_id": {
                    "type": "string",
                    "description": "ID of the IDP Group"
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "Comma-separated string of channel IDs"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if the token provided is not associated with an Org Admin or Owner",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "not_an_admin",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.usergroups:write"]
          }
        ]
      }
    },
    "/admin.users.assign": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Add an Enterprise user to a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.assign"
        },
        "operationId": "admin_users_assign",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to add to the workspace."
                  },
                  "is_restricted": {
                    "type": "boolean",
                    "description": "True if user should be added to the workspace as a guest."
                  },
                  "is_ultra_restricted": {
                    "type": "boolean",
                    "description": "True if user should be added to the workspace as a single-channel guest."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "Comma separated values of channel IDs to add user in the new workspace."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to add to the workspace."
                  },
                  "is_restricted": {
                    "type": "boolean",
                    "description": "True if user should be added to the workspace as a guest."
                  },
                  "is_ultra_restricted": {
                    "type": "boolean",
                    "description": "True if user should be added to the workspace as a single-channel guest."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "Comma separated values of channel IDs to add user in the new workspace."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.invite": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Invite a user to a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.invite"
        },
        "operationId": "admin_users_invite",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel_ids", "email", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the person to invite."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required."
                  },
                  "custom_message": {
                    "type": "string",
                    "description": "An optional message to send to the user in the invite email."
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Full name of the user."
                  },
                  "resend": {
                    "type": "boolean",
                    "description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)"
                  },
                  "is_restricted": {
                    "type": "boolean",
                    "description": "Is this user a multi-channel guest user? (default: false)"
                  },
                  "is_ultra_restricted": {
                    "type": "boolean",
                    "description": "Is this user a single channel guest user? (default: false)"
                  },
                  "guest_expiration_ts": {
                    "type": "string",
                    "description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel_ids", "email", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the person to invite."
                  },
                  "channel_ids": {
                    "type": "string",
                    "description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required."
                  },
                  "custom_message": {
                    "type": "string",
                    "description": "An optional message to send to the user in the invite email."
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Full name of the user."
                  },
                  "resend": {
                    "type": "boolean",
                    "description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)"
                  },
                  "is_restricted": {
                    "type": "boolean",
                    "description": "Is this user a multi-channel guest user? (default: false)"
                  },
                  "is_ultra_restricted": {
                    "type": "boolean",
                    "description": "Is this user a single channel guest user? (default: false)"
                  },
                  "guest_expiration_ts": {
                    "type": "string",
                    "description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.list": {
      "get": {
        "tags": ["admin.users", "admin"],
        "description": "List users on a workspace",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.list"
        },
        "operationId": "admin_users_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "The ID (`T1234`) of the workspace.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for how many users to be retrieved per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "users": [
                    {
                      "email": "bront@slack.com",
                      "id": "T1234",
                      "is_admin": false,
                      "is_bot": false,
                      "is_owner": false,
                      "is_primary_owner": false,
                      "is_restricted": false,
                      "is_ultra_restricted": false
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:read"]
          }
        ]
      }
    },
    "/admin.users.remove": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Remove a user from a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.remove"
        },
        "operationId": "admin_users_remove",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to remove."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to remove."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.session.invalidate": {
      "post": {
        "tags": ["admin.users.session", "admin"],
        "description": "Invalidate a single session for a user by session_id",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.session.invalidate"
        },
        "operationId": "admin_users_session_invalidate",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["session_id", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID of the team that the session belongs to"
                  },
                  "session_id": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["session_id", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "ID of the team that the session belongs to"
                  },
                  "session_id": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.session.reset": {
      "post": {
        "tags": ["admin.users.session", "admin"],
        "description": "Wipes all valid sessions on all devices for a given user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.session.reset"
        },
        "operationId": "admin_users_session_reset",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["user_id"],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to wipe sessions for"
                  },
                  "mobile_only": {
                    "type": "boolean",
                    "description": "Only expire mobile sessions (default: false)"
                  },
                  "web_only": {
                    "type": "boolean",
                    "description": "Only expire web sessions (default: false)"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["user_id"],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to wipe sessions for"
                  },
                  "mobile_only": {
                    "type": "boolean",
                    "description": "Only expire mobile sessions (default: false)"
                  },
                  "web_only": {
                    "type": "boolean",
                    "description": "Only expire web sessions (default: false)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.setAdmin": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Set an existing guest, regular user, or owner to be an admin user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setAdmin"
        },
        "operationId": "admin_users_setAdmin",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to designate as an admin."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to designate as an admin."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.setExpiration": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Set an expiration for a guest user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setExpiration"
        },
        "operationId": "admin_users_setExpiration",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["expiration_ts", "team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to set an expiration for."
                  },
                  "expiration_ts": {
                    "type": "integer",
                    "description": "Timestamp when guest account should be disabled.",
                    "format": "int32"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["expiration_ts", "team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to set an expiration for."
                  },
                  "expiration_ts": {
                    "type": "integer",
                    "description": "Timestamp when guest account should be disabled.",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.setOwner": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Set an existing guest, regular user, or admin user to be a workspace owner.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setOwner"
        },
        "operationId": "admin_users_setOwner",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "Id of the user to promote to owner."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "Id of the user to promote to owner."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/admin.users.setRegular": {
      "post": {
        "tags": ["admin.users", "admin"],
        "description": "Set an existing guest user, admin user, or owner to be a regular user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/admin.users.setRegular"
        },
        "operationId": "admin_users_setRegular",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `admin.users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to designate as a regular user."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["team_id", "user_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "description": "The ID (`T1234`) of the workspace."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID of the user to designate as a regular user."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin.users:write"]
          }
        ]
      }
    },
    "/api.test": {
      "get": {
        "tags": ["api"],
        "description": "Checks API calling code.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/api.test"
        },
        "operationId": "api_test",
        "parameters": [
          {
            "name": "error",
            "in": "query",
            "description": "Error response to return",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "foo",
            "in": "query",
            "description": "example property to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "api.test success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Schema for successful response api.test method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Artificial error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "api.test error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Schema for error response api.test method"
                },
                "example": {
                  "args": {
                    "error": "my_error"
                  },
                  "error": "my_error",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.event.authorizations.list": {
      "get": {
        "tags": ["apps.event.authorizations", "apps"],
        "description": "Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.event.authorizations.list"
        },
        "operationId": "apps_event_authorizations_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `authorizations:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_context",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "authorizations": {
                    "enterprise_id": "string",
                    "is_bot": "string",
                    "team_id": "string",
                    "user_id": "string"
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["authorizations:read"]
          }
        ]
      }
    },
    "/apps.permissions.info": {
      "get": {
        "tags": ["apps.permissions", "apps"],
        "description": "Returns list of permissions this app has on a team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.info"
        },
        "operationId": "apps_permissions_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.info schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from apps.permissions.info method"
                },
                "example": {
                  "info": {
                    "app_home": {
                      "resources": {
                        "ids": ["D0C0NU1Q8", "D0BH95DLH"]
                      },
                      "scopes": ["chat:write", "im:history", "im:read"]
                    },
                    "channel": {
                      "resources": {
                        "excluded_ids": [],
                        "ids": ["C061FA5PB"],
                        "wildcard": false
                      },
                      "scopes": ["channels:read"]
                    },
                    "group": {
                      "resources": {
                        "ids": []
                      },
                      "scopes": []
                    },
                    "im": {
                      "resources": {
                        "ids": []
                      },
                      "scopes": []
                    },
                    "mpim": {
                      "resources": {
                        "ids": []
                      },
                      "scopes": []
                    },
                    "team": {
                      "resources": {
                        "ids": []
                      },
                      "scopes": []
                    }
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from apps.permissions.info method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.permissions.request": {
      "get": {
        "tags": ["apps.permissions", "apps"],
        "description": "Allows an app to request additional scopes",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.request"
        },
        "operationId": "apps_permissions_request",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "A comma separated list of scopes to request for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger_id",
            "in": "query",
            "description": "Token used to trigger the permissions API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.request schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from apps.permissions.request method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Standard failure response when trigger_id is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.request error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from apps.permissions.request method"
                },
                "example": {
                  "error": "invalid_trigger_id",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.permissions.resources.list": {
      "get": {
        "tags": ["apps.permissions.resources", "apps"],
        "description": "Returns list of resource grants this app has on a team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.resources.list"
        },
        "operationId": "apps_permissions_resources_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.resources.list success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response apps.permissions.resources.list method"
                },
                "example": {
                  "ok": true,
                  "resources": [
                    {
                      "id": "T0DES3UAN",
                      "type": "team"
                    },
                    {
                      "id": "D024BFF1M",
                      "type": "app_home"
                    },
                    {
                      "id": "C024BE91L",
                      "type": "channel"
                    }
                  ],
                  "response_metadata": {
                    "next_cursor": "dGVhbTpDMUg5UkVTR0w="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.resources.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from apps.permissions.resources.list method"
                },
                "example": {
                  "error": "invalid_cursor",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.permissions.scopes.list": {
      "get": {
        "tags": ["apps.permissions.scopes", "apps"],
        "description": "Returns list of scopes this app has on a team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.scopes.list"
        },
        "operationId": "apps_permissions_scopes_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "api.permissions.scopes.list success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response api.permissions.scopes.list method"
                },
                "example": {
                  "ok": true,
                  "scopes": {
                    "app_home": ["chat:write", "im:history", "im:read"],
                    "channel": ["channels:history", "chat:write"],
                    "group": ["chat:write"],
                    "im": ["chat:write"],
                    "mpim": ["chat:write"],
                    "team": ["users:read"],
                    "user": []
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.permissions.scopes.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from apps.permissions.scopes.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.permissions.users.list": {
      "get": {
        "tags": ["apps.permissions.users", "apps"],
        "description": "Returns list of user grants and corresponding scopes this app has on a team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.users.list"
        },
        "operationId": "apps_permissions_users_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical successful paginated response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "resources": [
                    {
                      "id": "U0DES3UAN",
                      "scopes": ["dnd:write:user", "reminders:write:user"]
                    },
                    {
                      "id": "U024BFF1M",
                      "scopes": ["reminders:write:user"]
                    }
                  ],
                  "response_metadata": {
                    "next_cursor": "dGVhbTdPMUg5UkFTT0w="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_cursor",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.permissions.users.request": {
      "get": {
        "tags": ["apps.permissions.users", "apps"],
        "description": "Enables an app to trigger a permissions modal to grant an app access to a user access scope.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.permissions.users.request"
        },
        "operationId": "apps_permissions_users_request",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "A comma separated list of user scopes to request for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger_id",
            "in": "query",
            "description": "Token used to trigger the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user this scope is being requested for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Standard failure response when trigger_id is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_trigger_id",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/apps.uninstall": {
      "get": {
        "tags": ["apps"],
        "description": "Uninstalls your app from a workspace.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/apps.uninstall"
        },
        "operationId": "apps_uninstall",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.uninstall schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from apps.uninstall method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "apps.uninstall error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from apps.uninstall method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/auth.revoke": {
      "get": {
        "tags": ["auth"],
        "description": "Revokes a token.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/auth.revoke"
        },
        "operationId": "auth_revoke",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "test",
            "in": "query",
            "description": "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "auth.revoke schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from auth.revoke method"
                },
                "example": {
                  "ok": true,
                  "revoked": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "auth.revoke error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from auth.revoke method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/auth.test": {
      "get": {
        "tags": ["auth"],
        "description": "Checks authentication & identity.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/auth.test"
        },
        "operationId": "auth_test",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "auth.test success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response auth.test method"
                },
                "example": {
                  "ok": true,
                  "team": "Subarachnoid Workspace",
                  "team_id": "T12345678",
                  "url": "https://subarachnoid.slack.com/",
                  "user": "grace",
                  "user_id": "W12345678"
                }
              }
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "auth.test error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response auth.test method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/bots.info": {
      "get": {
        "tags": ["bots"],
        "description": "Gets information about a bot user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/bots.info"
        },
        "operationId": "bots_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bot",
            "in": "query",
            "description": "Bot user to get info on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When successful, returns bot info by bot ID.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "bots.info schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from bots.info method"
                },
                "example": {
                  "bot": {
                    "app_id": "A161CLERW",
                    "deleted": false,
                    "icons": {
                      "image_36": "https://...",
                      "image_48": "https://...",
                      "image_72": "https://..."
                    },
                    "id": "B061F7JD2",
                    "name": "beforebot",
                    "updated": 1449272004,
                    "user_id": "U012ABCDEF"
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "When no bot can be found, it returns an error.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "bots.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from bots.info method"
                },
                "example": {
                  "error": "bot_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:read"]
          }
        ]
      }
    },
    "/calls.add": {
      "post": {
        "tags": ["calls"],
        "description": "Registers a new Call.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/calls.add"
        },
        "operationId": "calls_add",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `calls:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["external_unique_id", "join_url"],
                "properties": {
                  "external_unique_id": {
                    "type": "string",
                    "description": "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service."
                  },
                  "external_display_id": {
                    "type": "string",
                    "description": "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object."
                  },
                  "join_url": {
                    "type": "string",
                    "description": "The URL required for a client to join the Call."
                  },
                  "desktop_app_join_url": {
                    "type": "string",
                    "description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
                  },
                  "date_start": {
                    "type": "integer",
                    "description": "Call start time in UTC UNIX timestamp format",
                    "format": "int32"
                  },
                  "title": {
                    "type": "string",
                    "description": "The name of the Call."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required."
                  },
                  "users": {
                    "type": "string",
                    "description": "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["external_unique_id", "join_url"],
                "properties": {
                  "external_unique_id": {
                    "type": "string",
                    "description": "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service."
                  },
                  "external_display_id": {
                    "type": "string",
                    "description": "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object."
                  },
                  "join_url": {
                    "type": "string",
                    "description": "The URL required for a client to join the Call."
                  },
                  "desktop_app_join_url": {
                    "type": "string",
                    "description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
                  },
                  "date_start": {
                    "type": "integer",
                    "description": "Call start time in UTC UNIX timestamp format",
                    "format": "int32"
                  },
                  "title": {
                    "type": "string",
                    "description": "The name of the Call."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required."
                  },
                  "users": {
                    "type": "string",
                    "description": "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["calls:write"]
          }
        ]
      }
    },
    "/calls.end": {
      "post": {
        "tags": ["calls"],
        "description": "Ends a Call.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/calls.end"
        },
        "operationId": "calls_end",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `calls:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method."
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Call duration in seconds",
                    "format": "int32"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method."
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Call duration in seconds",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["calls:write"]
          }
        ]
      }
    },
    "/calls.info": {
      "get": {
        "tags": ["calls"],
        "description": "Returns information about a Call.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/calls.info"
        },
        "operationId": "calls_info",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `calls:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "`id` of the Call returned by the [`calls.add`](/methods/calls.add) method.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["calls:read"]
          }
        ]
      }
    },
    "/calls.participants.add": {
      "post": {
        "tags": ["calls.participants", "calls"],
        "description": "Registers new participants added to a Call.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/calls.participants.add"
        },
        "operationId": "calls_participants_add",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `calls:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["id", "users"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
                  },
                  "users": {
                    "type": "string",
                    "description": "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["id", "users"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
                  },
                  "users": {
                    "type": "string",
                    "description": "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["calls:write"]
          }
        ]
      }
    },
    "/calls.participants.remove": {
      "post": {
        "tags": ["calls.participants", "calls"],
        "description": "Registers participants removed from a Call.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/calls.participants.remove"
        },
        "operationId": "calls_participants_remove",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `calls:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["id", "users"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
                  },
                  "users": {
                    "type": "string",
                    "description": "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["id", "users"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
                  },
                  "users": {
                    "type": "string",
                    "description": "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["calls:write"]
          }
        ]
      }
    },
    "/calls.update": {
      "post": {
        "tags": ["calls"],
        "description": "Updates information about a Call.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/calls.update"
        },
        "operationId": "calls_update",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `calls:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
                  },
                  "title": {
                    "type": "string",
                    "description": "The name of the Call."
                  },
                  "join_url": {
                    "type": "string",
                    "description": "The URL required for a client to join the Call."
                  },
                  "desktop_app_join_url": {
                    "type": "string",
                    "description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
                  },
                  "title": {
                    "type": "string",
                    "description": "The name of the Call."
                  },
                  "join_url": {
                    "type": "string",
                    "description": "The URL required for a client to join the Call."
                  },
                  "desktop_app_join_url": {
                    "type": "string",
                    "description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["calls:write"]
          }
        ]
      }
    },
    "/chat.delete": {
      "post": {
        "tags": ["chat"],
        "description": "Deletes a message.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.delete"
        },
        "operationId": "chat_delete",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "ts": {
                    "type": "number",
                    "description": "Timestamp of the message to be deleted."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel containing the message to be deleted."
                  },
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "ts": {
                    "type": "number",
                    "description": "Timestamp of the message to be deleted."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel containing the message to be deleted."
                  },
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.delete success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of chat.delete method"
                },
                "example": {
                  "channel": "C024BE91L",
                  "ok": true,
                  "ts": "1401383885.000061"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.delete error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.delete method"
                },
                "example": {
                  "error": "message_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/chat.deleteScheduledMessage": {
      "post": {
        "tags": ["chat"],
        "description": "Deletes a pending scheduled message from the queue.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.deleteScheduledMessage"
        },
        "operationId": "chat_deleteScheduledMessage",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel", "scheduled_message_id"],
                "properties": {
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
                  },
                  "channel": {
                    "type": "string",
                    "description": "The channel the scheduled_message is posting to"
                  },
                  "scheduled_message_id": {
                    "type": "string",
                    "description": "`scheduled_message_id` returned from call to chat.scheduleMessage"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel", "scheduled_message_id"],
                "properties": {
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
                  },
                  "channel": {
                    "type": "string",
                    "description": "The channel the scheduled_message is posting to"
                  },
                  "scheduled_message_id": {
                    "type": "string",
                    "description": "`scheduled_message_id` returned from call to chat.scheduleMessage"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.deleteScheduledMessage schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from chat.deleteScheduledMessage method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if no message is found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.deleteScheduledMessage error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.deleteScheduledMessage method"
                },
                "example": {
                  "error": "invalid_scheduled_message_id",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/chat.getPermalink": {
      "get": {
        "tags": ["chat"],
        "description": "Retrieve a permalink URL for a specific extant message",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.getPermalink"
        },
        "operationId": "chat_getPermalink",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The ID of the conversation or channel containing the message",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message_ts",
            "in": "query",
            "description": "A message's `ts` value, uniquely identifying it within a channel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.getPermalink success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response chat.getPermalink"
                },
                "example": {
                  "channel": "C1H9RESGA",
                  "ok": true,
                  "permalink": "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"
                }
              }
            }
          },
          "default": {
            "description": "Error response when channel cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.getPermalink error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.getPermalink method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/chat.meMessage": {
      "post": {
        "tags": ["chat"],
        "description": "Share a me message into a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.meMessage"
        },
        "operationId": "chat_meMessage",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."
                  },
                  "text": {
                    "type": "string",
                    "description": "Text of the message to send."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."
                  },
                  "text": {
                    "type": "string",
                    "description": "Text of the message to send."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.meMessage schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from chat.meMessage method"
                },
                "example": {
                  "channel": "C024BE7LR",
                  "ok": true,
                  "ts": "1417671948.000006"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.meMessage error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.meMessage method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/chat.postEphemeral": {
      "post": {
        "tags": ["chat"],
        "description": "Sends an ephemeral message to a user in a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.postEphemeral"
        },
        "operationId": "chat_postEphemeral",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel", "user"],
                "properties": {
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."
                  },
                  "icon_emoji": {
                    "type": "string",
                    "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "icon_url": {
                    "type": "string",
                    "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "link_names": {
                    "type": "boolean",
                    "description": "Find and link channel names and usernames."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
                  },
                  "text": {
                    "type": "string",
                    "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
                  },
                  "thread_ts": {
                    "type": "string",
                    "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."
                  },
                  "user": {
                    "type": "string",
                    "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."
                  },
                  "username": {
                    "type": "string",
                    "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel", "user"],
                "properties": {
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."
                  },
                  "icon_emoji": {
                    "type": "string",
                    "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "icon_url": {
                    "type": "string",
                    "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "link_names": {
                    "type": "boolean",
                    "description": "Find and link channel names and usernames."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
                  },
                  "text": {
                    "type": "string",
                    "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
                  },
                  "thread_ts": {
                    "type": "string",
                    "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."
                  },
                  "user": {
                    "type": "string",
                    "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."
                  },
                  "username": {
                    "type": "string",
                    "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.postEphemeral success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from chat.postEphemeral method"
                },
                "example": {
                  "message_ts": "1502210682.580145",
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.postEphemeral error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.postEphemeral method"
                },
                "example": {
                  "error": "user_not_in_channel",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/chat.postMessage": {
      "post": {
        "tags": ["chat"],
        "description": "Sends a message to a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.postMessage"
        },
        "operationId": "chat_postMessage",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel"],
                "properties": {
                  "as_user": {
                    "type": "string",
                    "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
                  },
                  "icon_emoji": {
                    "type": "string",
                    "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "icon_url": {
                    "type": "string",
                    "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "link_names": {
                    "type": "boolean",
                    "description": "Find and link channel names and usernames."
                  },
                  "mrkdwn": {
                    "type": "boolean",
                    "description": "Disable Slack markup parsing by setting to `false`. Enabled by default."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
                  },
                  "reply_broadcast": {
                    "type": "boolean",
                    "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
                  },
                  "text": {
                    "type": "string",
                    "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
                  },
                  "thread_ts": {
                    "type": "string",
                    "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
                  },
                  "unfurl_links": {
                    "type": "boolean",
                    "description": "Pass true to enable unfurling of primarily text-based content."
                  },
                  "unfurl_media": {
                    "type": "boolean",
                    "description": "Pass false to disable unfurling of media content."
                  },
                  "username": {
                    "type": "string",
                    "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel"],
                "properties": {
                  "as_user": {
                    "type": "string",
                    "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
                  },
                  "icon_emoji": {
                    "type": "string",
                    "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "icon_url": {
                    "type": "string",
                    "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  },
                  "link_names": {
                    "type": "boolean",
                    "description": "Find and link channel names and usernames."
                  },
                  "mrkdwn": {
                    "type": "boolean",
                    "description": "Disable Slack markup parsing by setting to `false`. Enabled by default."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
                  },
                  "reply_broadcast": {
                    "type": "boolean",
                    "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
                  },
                  "text": {
                    "type": "string",
                    "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
                  },
                  "thread_ts": {
                    "type": "string",
                    "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
                  },
                  "unfurl_links": {
                    "type": "boolean",
                    "description": "Pass true to enable unfurling of primarily text-based content."
                  },
                  "unfurl_media": {
                    "type": "boolean",
                    "description": "Pass false to disable unfurling of media content."
                  },
                  "username": {
                    "type": "string",
                    "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.postMessage success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of chat.postMessage method"
                },
                "example": {
                  "channel": "C1H9RESGL",
                  "message": {
                    "attachments": [
                      {
                        "fallback": "This is an attachment's fallback",
                        "id": 1,
                        "text": "This is an attachment"
                      }
                    ],
                    "bot_id": "B19LU7CSY",
                    "subtype": "bot_message",
                    "text": "Here's a message for you",
                    "ts": "1503435956.000247",
                    "type": "message",
                    "username": "ecto1"
                  },
                  "ok": true,
                  "ts": "1503435956.000247"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if too many attachments are included",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.postMessage error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response chat.postMessage method"
                },
                "example": {
                  "error": "too_many_attachments",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/chat.scheduleMessage": {
      "post": {
        "tags": ["chat"],
        "description": "Schedules a message to be sent to a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.scheduleMessage"
        },
        "operationId": "chat_scheduleMessage",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
                  },
                  "text": {
                    "type": "string",
                    "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
                  },
                  "post_at": {
                    "type": "string",
                    "description": "Unix EPOCH timestamp of time in future to send the message."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."
                  },
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."
                  },
                  "link_names": {
                    "type": "boolean",
                    "description": "Find and link channel names and usernames."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                  },
                  "unfurl_links": {
                    "type": "boolean",
                    "description": "Pass true to enable unfurling of primarily text-based content."
                  },
                  "unfurl_media": {
                    "type": "boolean",
                    "description": "Pass false to disable unfurling of media content."
                  },
                  "thread_ts": {
                    "type": "number",
                    "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
                  },
                  "reply_broadcast": {
                    "type": "boolean",
                    "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
                  },
                  "text": {
                    "type": "string",
                    "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
                  },
                  "post_at": {
                    "type": "string",
                    "description": "Unix EPOCH timestamp of time in future to send the message."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."
                  },
                  "as_user": {
                    "type": "boolean",
                    "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."
                  },
                  "link_names": {
                    "type": "boolean",
                    "description": "Find and link channel names and usernames."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
                  },
                  "unfurl_links": {
                    "type": "boolean",
                    "description": "Pass true to enable unfurling of primarily text-based content."
                  },
                  "unfurl_media": {
                    "type": "boolean",
                    "description": "Pass false to disable unfurling of media content."
                  },
                  "thread_ts": {
                    "type": "number",
                    "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
                  },
                  "reply_broadcast": {
                    "type": "boolean",
                    "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.scheduleMessage success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of chat.scheduleMessage method"
                },
                "example": {
                  "channel": "C1H9RESGL",
                  "message": {
                    "attachments": [
                      {
                        "fallback": "This is an attachment's fallback",
                        "id": 1,
                        "text": "This is an attachment"
                      }
                    ],
                    "bot_id": "B19LU7CSY",
                    "subtype": "bot_message",
                    "text": "Here's a message for you in the future",
                    "type": "delayed_message",
                    "username": "ecto1"
                  },
                  "ok": true,
                  "post_at": "1562180400",
                  "scheduled_message_id": "Q1298393284"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.scheduleMessage error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response chat.scheduleMessage method"
                },
                "example": {
                  "error": "time_in_past",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/chat.scheduledMessages.list": {
      "get": {
        "tags": ["chat.scheduledMessages", "chat"],
        "description": "Returns a list of scheduled messages.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.scheduledMessages.list"
        },
        "operationId": "chat_scheduledMessages_list",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The channel of the scheduled messages",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "description": "A UNIX timestamp of the latest value in the time range",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "oldest",
            "in": "query",
            "description": "A UNIX timestamp of the oldest value in the time range",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of original entries to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.scheduledMessages.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from chat.scheduledMessages.list method"
                },
                "example": {
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": ""
                  },
                  "scheduled_messages": [
                    {
                      "channel_id": "C1H9RESGL",
                      "date_created": 1551891734,
                      "id": 1298393284,
                      "post_at": 1551991428,
                      "text": "Here's a message for you in the future"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if the channel passed is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.scheduledMessages.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.scheduledMessages.list method"
                },
                "example": {
                  "error": "invalid_channel",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/chat.unfurl": {
      "post": {
        "tags": ["chat"],
        "description": "Provide custom unfurl behavior for user-posted URLs",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.unfurl"
        },
        "operationId": "chat_unfurl",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `links:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel", "ts"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel ID of the message"
                  },
                  "ts": {
                    "type": "string",
                    "description": "Timestamp of the message to add unfurl behavior to."
                  },
                  "unfurls": {
                    "type": "string",
                    "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."
                  },
                  "user_auth_message": {
                    "type": "string",
                    "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
                  },
                  "user_auth_required": {
                    "type": "boolean",
                    "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"
                  },
                  "user_auth_url": {
                    "type": "string",
                    "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel", "ts"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel ID of the message"
                  },
                  "ts": {
                    "type": "string",
                    "description": "Timestamp of the message to add unfurl behavior to."
                  },
                  "unfurls": {
                    "type": "string",
                    "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."
                  },
                  "user_auth_message": {
                    "type": "string",
                    "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
                  },
                  "user_auth_required": {
                    "type": "boolean",
                    "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"
                  },
                  "user_auth_url": {
                    "type": "string",
                    "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical, minimal success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.unfurl success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from chat.unfurl method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.unfurl error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from chat.unfurl method"
                },
                "example": {
                  "error": "cannot_unfurl_url",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["links:write"]
          }
        ]
      }
    },
    "/chat.update": {
      "post": {
        "tags": ["chat"],
        "description": "Updates a message.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/chat.update"
        },
        "operationId": "chat_update",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `chat:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel", "ts"],
                "properties": {
                  "as_user": {
                    "type": "string",
                    "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel containing the message to be updated."
                  },
                  "link_names": {
                    "type": "string",
                    "description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."
                  },
                  "text": {
                    "type": "string",
                    "description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."
                  },
                  "ts": {
                    "type": "string",
                    "description": "Timestamp of the message to be updated."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel", "ts"],
                "properties": {
                  "as_user": {
                    "type": "string",
                    "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."
                  },
                  "attachments": {
                    "type": "string",
                    "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."
                  },
                  "blocks": {
                    "type": "string",
                    "description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel containing the message to be updated."
                  },
                  "link_names": {
                    "type": "string",
                    "description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."
                  },
                  "parse": {
                    "type": "string",
                    "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."
                  },
                  "text": {
                    "type": "string",
                    "description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."
                  },
                  "ts": {
                    "type": "string",
                    "description": "Timestamp of the message to be updated."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.update success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response of chat.update method"
                },
                "example": {
                  "channel": "C024BE91L",
                  "message": {
                    "text": "Updated text you carefully authored",
                    "user": "U34567890"
                  },
                  "ok": true,
                  "text": "Updated text you carefully authored",
                  "ts": "1401383885.000061"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "chat.update error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response chat.update method"
                },
                "example": {
                  "error": "cant_update_message",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["chat:write:user", "chat:write:bot"]
          }
        ]
      }
    },
    "/conversations.archive": {
      "post": {
        "tags": ["conversations"],
        "description": "Archives a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.archive"
        },
        "operationId": "conversations_archive",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to archive"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to archive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.archive success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.archive method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.archive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.archive method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.close": {
      "post": {
        "tags": ["conversations"],
        "description": "Closes a direct message or multi-person direct message.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.close"
        },
        "operationId": "conversations_close",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to close."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to close."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.close success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.close method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.close error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.close method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.create": {
      "post": {
        "tags": ["conversations"],
        "description": "Initiates a public or private channel-based conversation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.create"
        },
        "operationId": "conversations_create",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the public or private channel to create"
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Create a private channel instead of a public one"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the public or private channel to create"
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Create a private channel instead of a public one"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If successful, the command returns a rather stark [conversation object](/types/conversation)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.create success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.create method"
                },
                "example": {
                  "channel": {
                    "created": 1504554479,
                    "creator": "U0123456",
                    "id": "C0EAQDV4Z",
                    "is_archived": false,
                    "is_channel": true,
                    "is_ext_shared": false,
                    "is_general": false,
                    "is_group": false,
                    "is_im": false,
                    "is_member": true,
                    "is_mpim": false,
                    "is_org_shared": false,
                    "is_pending_ext_shared": false,
                    "is_private": false,
                    "is_shared": false,
                    "last_read": "0000000000.000000",
                    "name": "endeavor",
                    "name_normalized": "endeavor",
                    "pending_shared": [],
                    "previous_names": [],
                    "priority": 0,
                    "purpose": {
                      "creator": "",
                      "last_set": 0,
                      "value": ""
                    },
                    "topic": {
                      "creator": "",
                      "last_set": 0,
                      "value": ""
                    },
                    "unlinked": 0,
                    "unread_count": 0,
                    "unread_count_display": 0
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when name already in use",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.create error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.create method"
                },
                "example": {
                  "error": "name_taken",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.history": {
      "get": {
        "tags": ["conversations"],
        "description": "Fetches a conversation's history of messages and events.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.history"
        },
        "operationId": "conversations_history",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `conversations:history`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Conversation ID to fetch history for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "description": "End of time range of messages to include in results.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "oldest",
            "in": "query",
            "description": "Start of time range of messages to include in results.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "inclusive",
            "in": "query",
            "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response containing a channel's messages",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.history success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.history method"
                },
                "example": {
                  "has_more": true,
                  "messages": [
                    {
                      "text": "I find you punny and would like to smell your nose letter",
                      "ts": "1512085950.000216",
                      "type": "message",
                      "user": "U012AB3CDE"
                    },
                    {
                      "text": "What, you want to smell my shoes better?",
                      "ts": "1512104434.000490",
                      "type": "message",
                      "user": "U061F7AUR"
                    }
                  ],
                  "ok": true,
                  "pin_count": 0,
                  "response_metadata": {
                    "next_cursor": "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQz"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.history error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.history method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:history", "groups:history", "im:history", "mpim:history"]
          }
        ]
      }
    },
    "/conversations.info": {
      "get": {
        "tags": ["conversations"],
        "description": "Retrieve information about a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.info"
        },
        "operationId": "conversations_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `conversations:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Conversation ID to learn more about",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_locale",
            "in": "query",
            "description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_num_members",
            "in": "query",
            "description": "Set to `true` to include the member count for the specified conversation. Defaults to `false`",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.info success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.info"
                },
                "example": {
                  "channel": {
                    "created": 1449252889,
                    "creator": "W012A3BCD",
                    "id": "C012AB3CD",
                    "is_archived": false,
                    "is_channel": true,
                    "is_ext_shared": false,
                    "is_general": true,
                    "is_group": false,
                    "is_im": false,
                    "is_member": true,
                    "is_mpim": false,
                    "is_org_shared": false,
                    "is_pending_ext_shared": false,
                    "is_private": false,
                    "is_read_only": false,
                    "is_shared": false,
                    "last_read": "1502126650.228446",
                    "locale": "en-US",
                    "name": "general",
                    "name_normalized": "general",
                    "pending_shared": [],
                    "previous_names": ["specifics", "abstractions", "etc"],
                    "purpose": {
                      "creator": "W012A3BCD",
                      "last_set": 1449709364,
                      "value": "This part of the workspace is for fun. Make fun here."
                    },
                    "topic": {
                      "creator": "W012A3BCD",
                      "last_set": 1449709364,
                      "value": "For public discussion of generalities"
                    },
                    "unlinked": 0
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when a channel cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.info method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ]
      }
    },
    "/conversations.invite": {
      "post": {
        "tags": ["conversations"],
        "description": "Invites users to a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.invite"
        },
        "operationId": "conversations_invite",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "The ID of the public or private channel to invite user(s) to."
                  },
                  "users": {
                    "type": "string",
                    "description": "A comma separated list of user IDs. Up to 1000 users may be listed."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "The ID of the public or private channel to invite user(s) to."
                  },
                  "users": {
                    "type": "string",
                    "description": "A comma separated list of user IDs. Up to 1000 users may be listed."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response when an invitation is extended",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.invite error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.invite method"
                },
                "example": {
                  "channel": {
                    "created": 1449252889,
                    "creator": "W012A3BCD",
                    "id": "C012AB3CD",
                    "is_archived": false,
                    "is_channel": true,
                    "is_ext_shared": false,
                    "is_general": true,
                    "is_group": false,
                    "is_im": false,
                    "is_member": true,
                    "is_mpim": false,
                    "is_org_shared": false,
                    "is_pending_ext_shared": false,
                    "is_private": false,
                    "is_read_only": false,
                    "is_shared": false,
                    "last_read": "1502126650.228446",
                    "locale": "en-US",
                    "name": "general",
                    "name_normalized": "general",
                    "num_members": 23,
                    "pending_shared": [],
                    "previous_names": ["specifics", "abstractions", "etc"],
                    "purpose": {
                      "creator": "W012A3BCD",
                      "last_set": 1449709364,
                      "value": "This part of the workspace is for fun. Make fun here."
                    },
                    "topic": {
                      "creator": "W012A3BCD",
                      "last_set": 1449709364,
                      "value": "For public discussion of generalities"
                    },
                    "unlinked": 0
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when an invite is attempted on a conversation type that does not support it",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.invite error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.invite method"
                },
                "example": {
                  "error": "method_not_supported_for_channel_type",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.join": {
      "post": {
        "tags": ["conversations"],
        "description": "Joins an existing conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.join"
        },
        "operationId": "conversations_join",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `channels:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to join"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to join"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.join success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.join method"
                },
                "example": {
                  "channel": {
                    "created": 1449252889,
                    "creator": "U061F7AUR",
                    "id": "C061EG9SL",
                    "is_archived": false,
                    "is_channel": true,
                    "is_ext_shared": false,
                    "is_general": true,
                    "is_group": false,
                    "is_im": false,
                    "is_member": true,
                    "is_mpim": false,
                    "is_org_shared": false,
                    "is_pending_ext_shared": false,
                    "is_private": false,
                    "is_shared": false,
                    "name": "general",
                    "name_normalized": "general",
                    "pending_shared": [],
                    "previous_names": [],
                    "purpose": {
                      "creator": "",
                      "last_set": 0,
                      "value": "For widget discussion"
                    },
                    "topic": {
                      "creator": "",
                      "last_set": 0,
                      "value": "Which widget do you worry about?"
                    },
                    "unlinked": 0
                  },
                  "ok": true,
                  "response_metadata": {
                    "warnings": ["already_in_channel"]
                  },
                  "warning": "already_in_channel"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response if the conversation is archived and cannot be joined",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.join error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.join method"
                },
                "example": {
                  "error": "is_archived",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write"]
          }
        ]
      }
    },
    "/conversations.kick": {
      "post": {
        "tags": ["conversations"],
        "description": "Removes a user from a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.kick"
        },
        "operationId": "conversations_kick",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to remove user from."
                  },
                  "user": {
                    "type": "string",
                    "description": "User ID to be removed."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to remove user from."
                  },
                  "user": {
                    "type": "string",
                    "description": "User ID to be removed."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.kick success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.kick method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when you attempt to kick yourself from a channel",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.kick error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response conversations.kick method"
                },
                "example": {
                  "error": "cant_kick_self",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.leave": {
      "post": {
        "tags": ["conversations"],
        "description": "Leaves a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.leave"
        },
        "operationId": "conversations_leave",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to leave"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to leave"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.leave success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.leave method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when attempting to leave a workspace's \"general\" channel",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.leave error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.leave method"
                },
                "example": {
                  "error": "cant_leave_general",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.list": {
      "get": {
        "tags": ["conversations"],
        "description": "Lists all channels in a Slack team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.list"
        },
        "operationId": "conversations_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `conversations:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_archived",
            "in": "query",
            "description": "Set to `true` to exclude archived channels from the list",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response with only public channels",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.list success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.list method"
                },
                "example": {
                  "channels": [
                    {
                      "created": 1449252889,
                      "creator": "U012A3CDE",
                      "id": "C012AB3CD",
                      "is_archived": false,
                      "is_channel": true,
                      "is_ext_shared": false,
                      "is_general": true,
                      "is_group": false,
                      "is_im": false,
                      "is_member": true,
                      "is_mpim": false,
                      "is_org_shared": false,
                      "is_pending_ext_shared": false,
                      "is_private": false,
                      "is_shared": false,
                      "name": "general",
                      "name_normalized": "general",
                      "num_members": 4,
                      "pending_shared": [],
                      "previous_names": [],
                      "purpose": {
                        "creator": "",
                        "last_set": 0,
                        "value": "This channel is for team-wide communication and announcements. All team members are in this channel."
                      },
                      "topic": {
                        "creator": "",
                        "last_set": 0,
                        "value": "Company-wide announcements and work-based matters"
                      },
                      "unlinked": 0
                    },
                    {
                      "created": 1449252889,
                      "creator": "U061F7AUR",
                      "id": "C061EG9T2",
                      "is_archived": false,
                      "is_channel": true,
                      "is_ext_shared": false,
                      "is_general": false,
                      "is_group": false,
                      "is_im": false,
                      "is_member": true,
                      "is_mpim": false,
                      "is_org_shared": false,
                      "is_pending_ext_shared": false,
                      "is_private": false,
                      "is_shared": false,
                      "name": "random",
                      "name_normalized": "random",
                      "num_members": 4,
                      "pending_shared": [],
                      "previous_names": [],
                      "purpose": {
                        "creator": "",
                        "last_set": 0,
                        "value": "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."
                      },
                      "topic": {
                        "creator": "",
                        "last_set": 0,
                        "value": "Non-work banter and water cooler conversation"
                      },
                      "unlinked": 0
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "dGVhbTpDMDYxRkE1UEI="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ]
      }
    },
    "/conversations.mark": {
      "post": {
        "tags": ["conversations"],
        "description": "Sets the read cursor in a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.mark"
        },
        "operationId": "conversations_mark",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel or conversation to set the read cursor for."
                  },
                  "ts": {
                    "type": "number",
                    "description": "Unique identifier of message you want marked as most recently seen in this conversation."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel or conversation to set the read cursor for."
                  },
                  "ts": {
                    "type": "number",
                    "description": "Unique identifier of message you want marked as most recently seen in this conversation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.mark success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.mark method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.mark error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.mark method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.members": {
      "get": {
        "tags": ["conversations"],
        "description": "Retrieve members of a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.members"
        },
        "operationId": "conversations_members",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `conversations:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "ID of the conversation to retrieve members for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical paginated success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.members success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response conversations.members method"
                },
                "example": {
                  "members": ["U023BECGF", "U061F7AUR", "W012A3CDE"],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when an invalid cursor is provided",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.members error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response conversations.members method"
                },
                "example": {
                  "error": "invalid_cursor",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ]
      }
    },
    "/conversations.open": {
      "post": {
        "tags": ["conversations"],
        "description": "Opens or resumes a direct message or multi-person direct message.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.open"
        },
        "operationId": "conversations_open",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."
                  },
                  "users": {
                    "type": "string",
                    "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."
                  },
                  "return_im": {
                    "type": "boolean",
                    "description": "Boolean, indicates you want the full IM channel definition in the response."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."
                  },
                  "users": {
                    "type": "string",
                    "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."
                  },
                  "return_im": {
                    "type": "boolean",
                    "description": "Boolean, indicates you want the full IM channel definition in the response."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.open success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.open method when opening channels, ims, mpims"
                },
                "example": {
                  "channel": {
                    "id": "D069C7QFK"
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.open error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.open method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.rename": {
      "post": {
        "tags": ["conversations"],
        "description": "Renames a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.rename"
        },
        "operationId": "conversations_rename",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to rename"
                  },
                  "name": {
                    "type": "string",
                    "description": "New name for conversation."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to rename"
                  },
                  "name": {
                    "type": "string",
                    "description": "New name for conversation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.rename success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.rename method"
                },
                "example": {
                  "channel": {
                    "created": 1449252889,
                    "creator": "W012A3BCD",
                    "id": "C012AB3CD",
                    "is_archived": false,
                    "is_channel": true,
                    "is_ext_shared": false,
                    "is_general": true,
                    "is_group": false,
                    "is_im": false,
                    "is_member": true,
                    "is_mpim": false,
                    "is_org_shared": false,
                    "is_pending_ext_shared": false,
                    "is_private": false,
                    "is_read_only": false,
                    "is_shared": false,
                    "last_read": "1502126650.228446",
                    "locale": "en-US",
                    "name": "general",
                    "name_normalized": "general",
                    "num_members": 23,
                    "pending_shared": [],
                    "previous_names": ["specifics", "abstractions", "etc"],
                    "purpose": {
                      "creator": "W012A3BCD",
                      "last_set": 1449709364,
                      "value": "This part of the workspace is for fun. Make fun here."
                    },
                    "topic": {
                      "creator": "W012A3BCD",
                      "last_set": 1449709364,
                      "value": "For public discussion of generalities"
                    },
                    "unlinked": 0
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when the calling user is not a member of the conversation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.rename error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.rename method"
                },
                "example": {
                  "error": "not_in_channel",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.replies": {
      "get": {
        "tags": ["conversations"],
        "description": "Retrieve a thread of messages posted to a conversation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.replies"
        },
        "operationId": "conversations_replies",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `conversations:history`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Conversation ID to fetch thread from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "in": "query",
            "description": "Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "description": "End of time range of messages to include in results.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "oldest",
            "in": "query",
            "description": "Start of time range of messages to include in results.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "inclusive",
            "in": "query",
            "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.replies success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.replies method"
                },
                "example": {
                  "has_more": true,
                  "messages": [
                    {
                      "last_read": "1484678597.521003",
                      "reply_count": 3,
                      "subscribed": true,
                      "text": "island",
                      "thread_ts": "1482960137.003543",
                      "ts": "1482960137.003543",
                      "type": "message",
                      "unread_count": 0,
                      "user": "U061F7AUR"
                    },
                    {
                      "parent_user_id": "U061F7AUR",
                      "text": "one island",
                      "thread_ts": "1482960137.003543",
                      "ts": "1483037603.017503",
                      "type": "message",
                      "user": "U061F7AUR"
                    },
                    {
                      "parent_user_id": "U061F7AUR",
                      "text": "two island",
                      "thread_ts": "1482960137.003543",
                      "ts": "1483051909.018632",
                      "type": "message",
                      "user": "U061F7AUR"
                    },
                    {
                      "parent_user_id": "U061F7AUR",
                      "text": "three for the land",
                      "thread_ts": "1482960137.003543",
                      "ts": "1483125339.020269",
                      "type": "message",
                      "user": "U061F7AUR"
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "bmV4dF90czoxNDg0Njc4MjkwNTE3MDkx"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.replies error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.replies method"
                },
                "example": {
                  "error": "thread_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:history", "groups:history", "im:history", "mpim:history"]
          }
        ]
      }
    },
    "/conversations.setPurpose": {
      "post": {
        "tags": ["conversations"],
        "description": "Sets the purpose for a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.setPurpose"
        },
        "operationId": "conversations_setPurpose",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to set the purpose of"
                  },
                  "purpose": {
                    "type": "string",
                    "description": "A new, specialer purpose"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to set the purpose of"
                  },
                  "purpose": {
                    "type": "string",
                    "description": "A new, specialer purpose"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.setPurpose success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.setPurpose method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.setPurpose error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.setPurpose method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.setTopic": {
      "post": {
        "tags": ["conversations"],
        "description": "Sets the topic for a conversation.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.setTopic"
        },
        "operationId": "conversations_setTopic",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to set the topic of"
                  },
                  "topic": {
                    "type": "string",
                    "description": "The new topic string. Does not support formatting or linkification."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Conversation to set the topic of"
                  },
                  "topic": {
                    "type": "string",
                    "description": "The new topic string. Does not support formatting or linkification."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.setTopic success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.setTopic method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.setTopic error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.setTopic method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/conversations.unarchive": {
      "post": {
        "tags": ["conversations"],
        "description": "Reverses conversation archival.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/conversations.unarchive"
        },
        "operationId": "conversations_unarchive",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `conversations:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to unarchive"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "ID of conversation to unarchive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.unarchive success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from conversations.unarchive method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "conversations.unarchive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from conversations.unarchive method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]
          }
        ]
      }
    },
    "/dialog.open": {
      "get": {
        "tags": ["dialog"],
        "description": "Open a dialog with a user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dialog.open"
        },
        "operationId": "dialog_open",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dialog",
            "in": "query",
            "description": "The dialog definition. This must be a JSON-encoded string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger_id",
            "in": "query",
            "description": "Exchange a trigger to post to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response is quite minimal.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dialog.open schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from dialog.open method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dialog.open error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from dialog.open method"
                },
                "example": {
                  "error": "missing_trigger",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/dnd.endDnd": {
      "post": {
        "tags": ["dnd"],
        "description": "Ends the current user's Do Not Disturb session immediately.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.endDnd"
        },
        "operationId": "dnd_endDnd",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `dnd:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.endDnd schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from dnd.endDnd method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.endDnd error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from dnd.endDnd method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["dnd:write"]
          }
        ]
      }
    },
    "/dnd.endSnooze": {
      "post": {
        "tags": ["dnd"],
        "description": "Ends the current user's snooze mode immediately.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.endSnooze"
        },
        "operationId": "dnd_endSnooze",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `dnd:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.endSnooze schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from dnd.endSnooze method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.endSnooze error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from dnd.endSnooze method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["dnd:write"]
          }
        ]
      }
    },
    "/dnd.info": {
      "get": {
        "tags": ["dnd"],
        "description": "Retrieves a user's current Do Not Disturb status.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.info"
        },
        "operationId": "dnd_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `dnd:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "User to fetch status for (defaults to current user)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.info schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from dnd.info method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from dnd.info method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["dnd:read"]
          }
        ]
      }
    },
    "/dnd.setSnooze": {
      "post": {
        "tags": ["dnd"],
        "description": "Turns on Do Not Disturb mode for the current user, or changes its duration.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.setSnooze"
        },
        "operationId": "dnd_setSnooze",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["num_minutes", "token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `dnd:write`"
                  },
                  "num_minutes": {
                    "type": "string",
                    "description": "Number of minutes, from now, to snooze until."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.setSnooze schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from dnd.setSnooze method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dnd.setSnooze error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from dnd.setSnooze method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["dnd:write"]
          }
        ]
      }
    },
    "/dnd.teamInfo": {
      "get": {
        "tags": ["dnd"],
        "description": "Retrieves the Do Not Disturb status for up to 50 users on a team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/dnd.teamInfo"
        },
        "operationId": "dnd_teamInfo",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `dnd:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "Comma-separated list of users to fetch Do Not Disturb status for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "users": {
                    "U023BECGF": {
                      "dnd_enabled": true,
                      "next_dnd_end_ts": 1450423800,
                      "next_dnd_start_ts": 1450387800
                    },
                    "W058CJVAA": {
                      "dnd_enabled": false,
                      "next_dnd_end_ts": 1,
                      "next_dnd_start_ts": 1
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["dnd:read"]
          }
        ]
      }
    },
    "/emoji.list": {
      "get": {
        "tags": ["emoji"],
        "description": "Lists custom emoji for a team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/emoji.list"
        },
        "operationId": "emoji_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `emoji:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["emoji:read"]
          }
        ]
      }
    },
    "/files.comments.delete": {
      "post": {
        "tags": ["files.comments", "files"],
        "description": "Deletes an existing comment on a file.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.comments.delete"
        },
        "operationId": "files_comments_delete",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `files:write:user`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to delete a comment from."
                  },
                  "id": {
                    "type": "string",
                    "description": "The comment to delete."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to delete a comment from."
                  },
                  "id": {
                    "type": "string",
                    "description": "The comment to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard success response is very simple",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.comments.delete schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response files.comments.delete method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.comments.delete error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response files.comments.delete method"
                },
                "example": {
                  "error": "file_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:write:user"]
          }
        ]
      }
    },
    "/files.delete": {
      "post": {
        "tags": ["files"],
        "description": "Deletes a file.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.delete"
        },
        "operationId": "files_delete",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `files:write:user`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "ID of file to delete."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "ID of file to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.delete schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response files.delete method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.delete error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response files.delete method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:write:user"]
          }
        ]
      }
    },
    "/files.info": {
      "get": {
        "tags": ["files"],
        "description": "Gets information about a file.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.info"
        },
        "operationId": "files_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `files:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Specify a file by providing its ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.info schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from files.info method"
                },
                "example": {
                  "comments": [],
                  "file": {
                    "channels": ["C0T8SE4AU"],
                    "comments_count": 0,
                    "created": 1531763342,
                    "deanimate_gif": "https://.../tedair_deanimate_gif.png",
                    "display_as_bot": false,
                    "editable": false,
                    "external_type": "",
                    "filetype": "gif",
                    "groups": [],
                    "has_rich_preview": false,
                    "id": "F0S43PZDF",
                    "image_exif_rotation": 1,
                    "ims": [],
                    "is_external": false,
                    "is_public": true,
                    "is_starred": false,
                    "mimetype": "image/gif",
                    "mode": "hosted",
                    "name": "tedair.gif",
                    "original_h": 226,
                    "original_w": 176,
                    "permalink": "https://.../tedair.gif",
                    "permalink_public": "https://.../...",
                    "pjpeg": "https://.../tedair_pjpeg.jpg",
                    "pretty_type": "GIF",
                    "public_url_shared": false,
                    "shares": {
                      "public": {
                        "C0T8SE4AU": [
                          {
                            "channel_name": "file-under",
                            "latest_reply": "1531763348.000001",
                            "reply_count": 1,
                            "reply_users": ["U061F7AUR"],
                            "reply_users_count": 1,
                            "team_id": "T061EG9R6",
                            "thread_ts": "1531763273.000015",
                            "ts": "1531763348.000001"
                          }
                        ]
                      }
                    },
                    "size": 137531,
                    "thumb_160": "https://.../tedair_=_160.png",
                    "thumb_360": "https://.../tedair_360.png",
                    "thumb_360_gif": "https://.../tedair_360.gif",
                    "thumb_360_h": 226,
                    "thumb_360_w": 176,
                    "thumb_64": "https://.../tedair_64.png",
                    "thumb_80": "https://.../tedair_80.png",
                    "timestamp": 1531763342,
                    "title": "tedair.gif",
                    "url_private": "https://.../tedair.gif",
                    "url_private_download": "https://.../tedair.gif",
                    "user": "U061F7AUR",
                    "username": ""
                  },
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "dGVhbTpDMUg5UkVTR0w="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from files.info method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:read"]
          }
        ]
      }
    },
    "/files.list": {
      "get": {
        "tags": ["files"],
        "description": "List for a team, in a channel, or from a user with applied filters.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.list"
        },
        "operationId": "files_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `files:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Filter files created by a single user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Filter files appearing in a specific channel, indicated by its ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts_from",
            "in": "query",
            "description": "Filter files created after this timestamp (inclusive).",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ts_to",
            "in": "query",
            "description": "Filter files created before this timestamp (inclusive).",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "show_files_hidden_by_limit",
            "in": "query",
            "description": "Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from files.list method"
                },
                "example": {
                  "files": [
                    {
                      "channels": ["C0T8SE4AU"],
                      "comments_count": 0,
                      "created": 1531763254,
                      "deanimate_gif": "https://.../billair_deanimate_gif.png",
                      "display_as_bot": false,
                      "editable": false,
                      "external_type": "",
                      "filetype": "gif",
                      "groups": [],
                      "id": "F0S43P1CZ",
                      "image_exif_rotation": 1,
                      "ims": [],
                      "is_external": false,
                      "is_public": true,
                      "mimetype": "image/gif",
                      "mode": "hosted",
                      "name": "billair.gif",
                      "original_h": 226,
                      "original_w": 176,
                      "permalink": "https://.../billair.gif",
                      "permalink_public": "https://.../...",
                      "pjpeg": "https://.../billair_pjpeg.jpg",
                      "pretty_type": "GIF",
                      "public_url_shared": false,
                      "size": 144538,
                      "thumb_160": "https://.../billair_=_160.png",
                      "thumb_360": "https://.../billair_360.png",
                      "thumb_360_gif": "https://.../billair_360.gif",
                      "thumb_360_h": 226,
                      "thumb_360_w": 176,
                      "thumb_64": "https://.../billair_64.png",
                      "thumb_80": "https://.../billair_80.png",
                      "timestamp": 1531763254,
                      "title": "billair.gif",
                      "url_private": "https://.../billair.gif",
                      "url_private_download": "https://.../billair.gif",
                      "user": "U061F7AUR",
                      "username": ""
                    },
                    {
                      "channels": ["C0T8SE4AU"],
                      "comments_count": 0,
                      "created": 1531763342,
                      "deanimate_gif": "https://.../tedair_deanimate_gif.png",
                      "display_as_bot": false,
                      "editable": false,
                      "external_type": "",
                      "filetype": "gif",
                      "groups": [],
                      "id": "F0S43PZDF",
                      "image_exif_rotation": 1,
                      "ims": [],
                      "is_external": false,
                      "is_public": true,
                      "mimetype": "image/gif",
                      "mode": "hosted",
                      "name": "tedair.gif",
                      "original_h": 226,
                      "original_w": 176,
                      "permalink": "https://.../tedair.gif",
                      "permalink_public": "https://.../...",
                      "pjpeg": "https://.../tedair_pjpeg.jpg",
                      "pretty_type": "GIF",
                      "public_url_shared": false,
                      "size": 137531,
                      "thumb_160": "https://.../tedair_=_160.png",
                      "thumb_360": "https://.../tedair_360.png",
                      "thumb_360_gif": "https://.../tedair_360.gif",
                      "thumb_360_h": 226,
                      "thumb_360_w": 176,
                      "thumb_64": "https://.../tedair_64.png",
                      "thumb_80": "https://.../tedair_80.png",
                      "timestamp": 1531763342,
                      "title": "tedair.gif",
                      "url_private": "https://.../tedair.gif",
                      "url_private_download": "https://.../tedair.gif",
                      "user": "U061F7AUR",
                      "username": ""
                    }
                  ],
                  "ok": true,
                  "paging": {
                    "count": 100,
                    "page": 1,
                    "pages": 1,
                    "total": 2
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from files.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:read"]
          }
        ]
      }
    },
    "/files.remote.add": {
      "post": {
        "tags": ["files.remote", "files"],
        "description": "Adds a file from a remote service",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.add"
        },
        "operationId": "files_remote_add",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `remote_files:write`"
                  },
                  "external_id": {
                    "type": "string",
                    "description": "Creator defined GUID for the file."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the file being shared."
                  },
                  "filetype": {
                    "type": "string",
                    "description": "type of file"
                  },
                  "external_url": {
                    "type": "string",
                    "description": "URL of the remote file."
                  },
                  "preview_image": {
                    "type": "string",
                    "description": "Preview of the document via `multipart/form-data`."
                  },
                  "indexable_file_contents": {
                    "type": "string",
                    "description": "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["remote_files:write"]
          }
        ]
      }
    },
    "/files.remote.info": {
      "get": {
        "tags": ["files.remote", "files"],
        "description": "Retrieve information about a remote file added to Slack",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.info"
        },
        "operationId": "files_remote_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `remote_files:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Specify a file by providing its ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_id",
            "in": "query",
            "description": "Creator defined GUID for the file.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["remote_files:read"]
          }
        ]
      }
    },
    "/files.remote.list": {
      "get": {
        "tags": ["files.remote", "files"],
        "description": "Retrieve information about a remote file added to Slack",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.list"
        },
        "operationId": "files_remote_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `remote_files:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Filter files appearing in a specific channel, indicated by its ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts_from",
            "in": "query",
            "description": "Filter files created after this timestamp (inclusive).",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ts_to",
            "in": "query",
            "description": "Filter files created before this timestamp (inclusive).",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["remote_files:read"]
          }
        ]
      }
    },
    "/files.remote.remove": {
      "post": {
        "tags": ["files.remote", "files"],
        "description": "Remove a remote file.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.remove"
        },
        "operationId": "files_remote_remove",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `remote_files:write`"
                  },
                  "file": {
                    "type": "string",
                    "description": "Specify a file by providing its ID."
                  },
                  "external_id": {
                    "type": "string",
                    "description": "Creator defined GUID for the file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["remote_files:write"]
          }
        ]
      }
    },
    "/files.remote.share": {
      "get": {
        "tags": ["files.remote", "files"],
        "description": "Share a remote file into a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.share"
        },
        "operationId": "files_remote_share",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `remote_files:share`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_id",
            "in": "query",
            "description": "The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channels",
            "in": "query",
            "description": "Comma-separated list of channel IDs where the file will be shared.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["remote_files:share"]
          }
        ]
      }
    },
    "/files.remote.update": {
      "post": {
        "tags": ["files.remote", "files"],
        "description": "Updates an existing remote file.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.remote.update"
        },
        "operationId": "files_remote_update",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `remote_files:write`"
                  },
                  "file": {
                    "type": "string",
                    "description": "Specify a file by providing its ID."
                  },
                  "external_id": {
                    "type": "string",
                    "description": "Creator defined GUID for the file."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the file being shared."
                  },
                  "filetype": {
                    "type": "string",
                    "description": "type of file"
                  },
                  "external_url": {
                    "type": "string",
                    "description": "URL of the remote file."
                  },
                  "preview_image": {
                    "type": "string",
                    "description": "Preview of the document via `multipart/form-data`."
                  },
                  "indexable_file_contents": {
                    "type": "string",
                    "description": "File containing contents that can be used to improve searchability for the remote file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["remote_files:write"]
          }
        ]
      }
    },
    "/files.revokePublicURL": {
      "post": {
        "tags": ["files"],
        "description": "Revokes public/external sharing access for a file",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.revokePublicURL"
        },
        "operationId": "files_revokePublicURL",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `files:write:user`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to revoke"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to revoke"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.revokePublicURL schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from files.revokePublicURL method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.revokePublicURL error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from files.revokePublicURL method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:write:user"]
          }
        ]
      }
    },
    "/files.sharedPublicURL": {
      "post": {
        "tags": ["files"],
        "description": "Enables a file for public/external sharing.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.sharedPublicURL"
        },
        "operationId": "files_sharedPublicURL",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `files:write:user`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to share"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to share"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.sharedPublicURL schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from files.sharedPublicURL method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.sharedPublicURL error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from files.sharedPublicURL method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:write:user"]
          }
        ]
      }
    },
    "/files.upload": {
      "post": {
        "tags": ["files"],
        "description": "Uploads or creates a file.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/files.upload"
        },
        "operationId": "files_upload",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `files:write:user`"
                  },
                  "file": {
                    "type": "string",
                    "description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`."
                  },
                  "content": {
                    "type": "string",
                    "description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`."
                  },
                  "filetype": {
                    "type": "string",
                    "description": "A [file type](/types/file#file_types) identifier."
                  },
                  "filename": {
                    "type": "string",
                    "description": "Filename of file."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of file."
                  },
                  "initial_comment": {
                    "type": "string",
                    "description": "The message text introducing the file in specified `channels`."
                  },
                  "channels": {
                    "type": "string",
                    "description": "Comma-separated list of channel names or IDs where the file will be shared."
                  },
                  "thread_ts": {
                    "type": "number",
                    "description": "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response after uploading a file to a channel with an initial message",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.upload schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response files.upload method"
                },
                "example": {
                  "file": {
                    "channels": [],
                    "comments_count": 0,
                    "created": 1532293501,
                    "display_as_bot": false,
                    "editable": false,
                    "external_type": "",
                    "filetype": "gif",
                    "groups": [],
                    "has_rich_preview": false,
                    "id": "F0TD00400",
                    "image_exif_rotation": 1,
                    "ims": ["D0L4B9P0Q"],
                    "is_external": false,
                    "is_public": false,
                    "is_starred": false,
                    "mimetype": "image/jpeg",
                    "mode": "hosted",
                    "name": "dramacat.gif",
                    "original_h": 366,
                    "original_w": 526,
                    "permalink": "https://.../dramacat.gif",
                    "permalink_public": "https://.../More-Path-Components",
                    "pretty_type": "JPEG",
                    "public_url_shared": false,
                    "shares": {
                      "private": {
                        "D0L4B9P0Q": [
                          {
                            "reply_count": 0,
                            "reply_users": [],
                            "reply_users_count": 0,
                            "ts": "1532293503.000001"
                          }
                        ]
                      }
                    },
                    "size": 43518,
                    "thumb_160": "https://.../dramacat_160.gif",
                    "thumb_360": "https://.../dramacat_360.gif",
                    "thumb_360_h": 250,
                    "thumb_360_w": 360,
                    "thumb_480": "https://.../dramacat_480.gif",
                    "thumb_480_h": 334,
                    "thumb_480_w": 480,
                    "thumb_64": "https://.../dramacat_64.gif",
                    "thumb_80": "https://.../dramacat_80.gif",
                    "timestamp": 1532293501,
                    "title": "dramacat",
                    "url_private": "https://.../dramacat.gif",
                    "url_private_download": "https://.../dramacat.gif",
                    "user": "U0L4B9NSU",
                    "username": ""
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "files.upload error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response files.upload method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["files:write:user"]
          }
        ]
      }
    },
    "/migration.exchange": {
      "get": {
        "tags": ["migration"],
        "description": "For Enterprise Grid workspaces, map local user IDs to global user IDs",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/migration.exchange"
        },
        "operationId": "migration_exchange",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `tokens.basic`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "A comma-separated list of user ids, up to 400 per request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "Specify team_id starts with `T` in case of Org Token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_old",
            "in": "query",
            "description": "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response when mappings exist for the specified user IDs",
            "content": {
              "application/json": {
                "schema": {
                  "title": "migration.exchange success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from migration.exchange method"
                },
                "example": {
                  "enterprise_id": "E1KQTNXE1",
                  "invalid_user_ids": ["U21ABZZXX"],
                  "ok": true,
                  "team_id": "T1KR7PE1W",
                  "user_id_map": {
                    "U06UBSUN5": "W06M56XJM",
                    "U06UBSVB3": "W06PUUDLY",
                    "U06UBSVDX": "W06PUUDMW",
                    "U06UEB62U": "W06PTT6GH",
                    "W06UAZ65Q": "W06UAZ65Q"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response when there are no mappings to provide",
            "content": {
              "application/json": {
                "schema": {
                  "title": "migration.exchange error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from migration.exchange method"
                },
                "example": {
                  "error": "not_enterprise_team",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["tokens.basic"]
          }
        ]
      }
    },
    "/oauth.access": {
      "get": {
        "tags": ["oauth"],
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/oauth.access"
        },
        "operationId": "oauth_access",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The `code` param returned via the OAuth callback.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "This must match the originally submitted URI (if one was sent).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "single_channel",
            "in": "query",
            "description": "Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful user token negotiation for a single scope",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "access_token": "xoxp-XXXXXXXX-XXXXXXXX-XXXXX",
                  "scope": "groups:write",
                  "team_id": "TXXXXXXXXX",
                  "team_name": "Wyld Stallyns LLC"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_client_id",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/oauth.token": {
      "get": {
        "tags": ["oauth"],
        "description": "Exchanges a temporary OAuth verifier code for a workspace token.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/oauth.token"
        },
        "operationId": "oauth_token",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The `code` param returned via the OAuth callback.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "This must match the originally submitted URI (if one was sent).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "single_channel",
            "in": "query",
            "description": "Request the user to add your app only to a single channel.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success example using a workspace app produces a very different kind of response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "access_token": "xoxa-access-token-string",
                  "app_id": "A012345678",
                  "app_user_id": "U0AB12ABC",
                  "authorizing_user_id": "U0HTT3Q0G",
                  "installer_user_id": "U061F7AUR",
                  "ok": true,
                  "permissions": [
                    {
                      "resource_id": 0,
                      "resource_type": "channel",
                      "scopes": ["channels:read", "chat:write:user"]
                    }
                  ],
                  "single_channel_id": "C061EG9T2",
                  "team_id": "T061EG9Z9",
                  "team_name": "Subarachnoid Workspace",
                  "token_type": "app"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_client_id",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/oauth.v2.access": {
      "get": {
        "tags": ["oauth.v2", "oauth"],
        "description": "Exchanges a temporary OAuth verifier code for an access token.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/oauth.v2.access"
        },
        "operationId": "oauth_v2_access",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "query",
            "description": "Issued when you created your application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The `code` param returned via the OAuth callback.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "This must match the originally submitted URI (if one was sent).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful token request with scopes for both a bot user and a user token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "access_token": "xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy",
                  "app_id": "A0KRD7HC3",
                  "authed_user": {
                    "access_token": "xoxp-1234",
                    "id": "U1234",
                    "scope": "chat:write",
                    "token_type": "user"
                  },
                  "bot_user_id": "U0KRQLJ9H",
                  "enterprise": {
                    "id": "E12345678",
                    "name": "slack-sports"
                  },
                  "ok": true,
                  "scope": "commands,incoming-webhook",
                  "team": {
                    "id": "T9TK3CUKW",
                    "name": "Slack Softball Team"
                  },
                  "token_type": "bot"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_client_id",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/pins.add": {
      "post": {
        "tags": ["pins"],
        "description": "Pins an item to a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/pins.add"
        },
        "operationId": "pins_add",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `pins:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to pin the item in."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to pin."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to pin the item in."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to pin."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "pins.add schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from pins.add method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "pins.add error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from pins.add method"
                },
                "example": {
                  "error": "channel_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["pins:write"]
          }
        ]
      }
    },
    "/pins.list": {
      "get": {
        "tags": ["pins"],
        "description": "Lists items pinned to a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/pins.list"
        },
        "operationId": "pins_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `pins:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Channel to get pinned items for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "pins.list success schema",
                  "type": "object",
                  "description": "Schema for successful response from pins.list method"
                },
                "example": {
                  "items": [
                    {
                      "channel": "C2U86NC6H",
                      "created": 1508881078,
                      "created_by": "U2U85N1RZ",
                      "message": {
                        "permalink": "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508197641000151",
                        "pinned_to": ["C2U86NC6H"],
                        "text": "What is the meaning of life?",
                        "ts": "1508197641.000151",
                        "type": "message",
                        "user": "U2U85N1RZ"
                      },
                      "type": "message"
                    },
                    {
                      "channel": "C2U86NC6H",
                      "created": 1508880991,
                      "created_by": "U2U85N1RZ",
                      "message": {
                        "permalink": "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508284197000015",
                        "pinned_to": ["C2U86NC6H"],
                        "text": "The meaning of life, the universe, and everything is 42.",
                        "ts": "1503289197.000015",
                        "type": "message",
                        "user": "U2U85N1RZ"
                      },
                      "type": "message"
                    }
                  ],
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "pins.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from pins.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["pins:read"]
          }
        ]
      }
    },
    "/pins.remove": {
      "post": {
        "tags": ["pins"],
        "description": "Un-pins an item from a channel.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/pins.remove"
        },
        "operationId": "pins_remove",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `pins:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel where the item is pinned to."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to un-pin."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel where the item is pinned to."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to un-pin."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "pins.remove schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from pins.remove method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "pins.remove error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from pins.remove method"
                },
                "example": {
                  "error": "no_pin",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["pins:write"]
          }
        ]
      }
    },
    "/reactions.add": {
      "post": {
        "tags": ["reactions"],
        "description": "Adds a reaction to an item.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.add"
        },
        "operationId": "reactions_add",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `reactions:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["channel", "name", "timestamp"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel where the message to add reaction to was posted."
                  },
                  "name": {
                    "type": "string",
                    "description": "Reaction (emoji) name."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to add reaction to."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["channel", "name", "timestamp"],
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel where the message to add reaction to was posted."
                  },
                  "name": {
                    "type": "string",
                    "description": "Reaction (emoji) name."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to add reaction to."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.add schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reactions.add method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.add error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reactions.add method"
                },
                "example": {
                  "error": "already_reacted",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reactions:write"]
          }
        ]
      }
    },
    "/reactions.get": {
      "get": {
        "tags": ["reactions"],
        "description": "Gets reactions for an item.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.get"
        },
        "operationId": "reactions_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `reactions:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Channel where the message to get reactions for was posted.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "File to get reactions for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_comment",
            "in": "query",
            "description": "File comment to get reactions for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "If true always return the complete reaction list.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Timestamp of the message to get reactions for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.get success schema",
                  "type": "object",
                  "description": "Schema for successful response from reactions.get method"
                },
                "example": {
                  "file": {
                    "channels": ["C2U7V2YA2"],
                    "comments_count": 1,
                    "created": 1507850315,
                    "groups": [],
                    "id": "F7H0D7ZA4",
                    "ims": [],
                    "name": "computer.gif",
                    "reactions": [
                      {
                        "count": 1,
                        "name": "stuck_out_tongue_winking_eye",
                        "users": ["U2U85N1RV"]
                      }
                    ],
                    "timestamp": 1507850315,
                    "title": "computer.gif",
                    "user": "U2U85N1RV"
                  },
                  "ok": true,
                  "type": "file"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.get error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reactions.get method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reactions:read"]
          }
        ]
      }
    },
    "/reactions.list": {
      "get": {
        "tags": ["reactions"],
        "description": "Lists reactions made by a user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.list"
        },
        "operationId": "reactions_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `reactions:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Show reactions made by this user. Defaults to the authed user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "If true always return the complete reaction list.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reactions.list method"
                },
                "example": {
                  "items": [
                    {
                      "channel": "C3UKJTQAC",
                      "message": {
                        "bot_id": "B4VLRLMKJ",
                        "reactions": [
                          {
                            "count": 1,
                            "name": "robot_face",
                            "users": ["U2U85N1RV"]
                          }
                        ],
                        "subtype": "bot_message",
                        "text": "Hello from Python! :tada:",
                        "ts": "1507849573.000090",
                        "username": "Shipit Notifications"
                      },
                      "type": "message"
                    },
                    {
                      "comment": {
                        "comment": "This is a file comment",
                        "created": 1508286096,
                        "id": "Fc7LP08P1U",
                        "reactions": [
                          {
                            "count": 1,
                            "name": "white_check_mark",
                            "users": ["U2U85N1RV"]
                          }
                        ],
                        "timestamp": 1508286096,
                        "type": "file_comment",
                        "user": "U2U85N1RV"
                      },
                      "file": {
                        "channels": ["C2U7V2YA2"],
                        "comments_count": 1,
                        "created": 1507850315,
                        "reactions": [
                          {
                            "count": 1,
                            "name": "stuck_out_tongue_winking_eye",
                            "users": ["U2U85N1RV"]
                          }
                        ],
                        "title": "computer.gif",
                        "user": "U2U85N1RV",
                        "username": ""
                      }
                    },
                    {
                      "file": {
                        "channels": ["C2U7V2YA2"],
                        "comments_count": 1,
                        "created": 1507850315,
                        "id": "F7H0D7ZA4",
                        "name": "computer.gif",
                        "reactions": [
                          {
                            "count": 1,
                            "name": "stuck_out_tongue_winking_eye",
                            "users": ["U2U85N1RV"]
                          }
                        ],
                        "size": 1639034,
                        "title": "computer.gif",
                        "user": "U2U85N1RV",
                        "username": ""
                      },
                      "type": "file"
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "dGVhbTpDMUg5UkVTR0w="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reactions.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reactions:read"]
          }
        ]
      }
    },
    "/reactions.remove": {
      "post": {
        "tags": ["reactions"],
        "description": "Removes a reaction from an item.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reactions.remove"
        },
        "operationId": "reactions_remove",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `reactions:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Reaction (emoji) name."
                  },
                  "file": {
                    "type": "string",
                    "description": "File to remove reaction from."
                  },
                  "file_comment": {
                    "type": "string",
                    "description": "File comment to remove reaction from."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel where the message to remove reaction from was posted."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to remove reaction from."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Reaction (emoji) name."
                  },
                  "file": {
                    "type": "string",
                    "description": "File to remove reaction from."
                  },
                  "file_comment": {
                    "type": "string",
                    "description": "File comment to remove reaction from."
                  },
                  "channel": {
                    "type": "string",
                    "description": "Channel where the message to remove reaction from was posted."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to remove reaction from."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.remove schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reactions.remove method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reactions.remove error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reactions.remove method"
                },
                "example": {
                  "error": "no_reaction",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reactions:write"]
          }
        ]
      }
    },
    "/reminders.add": {
      "post": {
        "tags": ["reminders"],
        "description": "Creates a reminder.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.add"
        },
        "operationId": "reminders_add",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `reminders:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["text", "time"],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The content of the reminder"
                  },
                  "time": {
                    "type": "string",
                    "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
                  },
                  "user": {
                    "type": "string",
                    "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["text", "time"],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The content of the reminder"
                  },
                  "time": {
                    "type": "string",
                    "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
                  },
                  "user": {
                    "type": "string",
                    "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.add schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reminders.add method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.add error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reminders.add method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reminders:write"]
          }
        ]
      }
    },
    "/reminders.complete": {
      "post": {
        "tags": ["reminders"],
        "description": "Marks a reminder as complete.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.complete"
        },
        "operationId": "reminders_complete",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `reminders:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "reminder": {
                    "type": "string",
                    "description": "The ID of the reminder to be marked as complete"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "reminder": {
                    "type": "string",
                    "description": "The ID of the reminder to be marked as complete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.complete schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reminders.complete method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.complete error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reminders.complete method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reminders:write"]
          }
        ]
      }
    },
    "/reminders.delete": {
      "post": {
        "tags": ["reminders"],
        "description": "Deletes a reminder.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.delete"
        },
        "operationId": "reminders_delete",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `reminders:write`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "reminder": {
                    "type": "string",
                    "description": "The ID of the reminder"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "reminder": {
                    "type": "string",
                    "description": "The ID of the reminder"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.delete schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reminders.delete method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.delete error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reminders.delete method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reminders:write"]
          }
        ]
      }
    },
    "/reminders.info": {
      "get": {
        "tags": ["reminders"],
        "description": "Gets information about a reminder.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.info"
        },
        "operationId": "reminders_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `reminders:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reminder",
            "in": "query",
            "description": "The ID of the reminder",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.info schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reminders.info method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reminders.info method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reminders:read"]
          }
        ]
      }
    },
    "/reminders.list": {
      "get": {
        "tags": ["reminders"],
        "description": "Lists all reminders created by or for a given user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/reminders.list"
        },
        "operationId": "reminders_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `reminders:read`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from reminders.list method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "reminders.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from reminders.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["reminders:read"]
          }
        ]
      }
    },
    "/rtm.connect": {
      "get": {
        "tags": ["rtm"],
        "description": "Starts a Real Time Messaging session.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/rtm.connect"
        },
        "operationId": "rtm_connect",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `rtm:stream`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batch_presence_aware",
            "in": "query",
            "description": "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "presence_sub",
            "in": "query",
            "description": "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "rtm.connect schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from rtm.connect method"
                },
                "example": {
                  "ok": true,
                  "self": {
                    "id": "U4X318ZMZ",
                    "name": "robotoverlord"
                  },
                  "team": {
                    "domain": "slackdemo",
                    "id": "T2U81E2FP",
                    "name": "SlackDemo"
                  },
                  "url": "wss://..."
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "rtm.connect error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from rtm.connect method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["rtm:stream"]
          }
        ]
      }
    },
    "/search.messages": {
      "get": {
        "tags": ["search"],
        "description": "Searches for messages matching a query.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/search.messages"
        },
        "operationId": "search_messages",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `search:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Pass the number of results you want per \"page\". Maximum of `100`.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "highlight",
            "in": "query",
            "description": "Pass a value of `true` to enable query highlight markers (see below).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Return matches sorted by either `score` or `timestamp`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "Change sort direction to ascending (`asc`) or descending (`desc`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "messages": {
                    "matches": [
                      {
                        "channel": {
                          "id": "C12345678",
                          "is_ext_shared": false,
                          "is_mpim": false,
                          "is_org_shared": false,
                          "is_pending_ext_shared": false,
                          "is_private": false,
                          "is_shared": false,
                          "name": "general",
                          "pending_shared": []
                        },
                        "iid": "cb64bdaa-c1e8-4631-8a91-0f78080113e9",
                        "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015",
                        "team": "T12345678",
                        "text": "The meaning of life the universe and everything is 42.",
                        "ts": "1508284197.000015",
                        "type": "message",
                        "user": "U2U85N1RV",
                        "username": "roach"
                      },
                      {
                        "channel": {
                          "id": "C12345678",
                          "is_ext_shared": false,
                          "is_mpim": false,
                          "is_org_shared": false,
                          "is_pending_ext_shared": false,
                          "is_private": false,
                          "is_shared": false,
                          "name": "random",
                          "pending_shared": []
                        },
                        "iid": "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90",
                        "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236",
                        "team": "T12345678",
                        "text": "The meaning of life the universe and everything is 101010",
                        "ts": "1508795665.000236",
                        "type": "message",
                        "user": "",
                        "username": "robot overlord"
                      }
                    ],
                    "pagination": {
                      "first": 1,
                      "last": 2,
                      "page": 1,
                      "page_count": 1,
                      "per_page": 20,
                      "total_count": 2
                    },
                    "paging": {
                      "count": 20,
                      "page": 1,
                      "pages": 1,
                      "total": 2
                    },
                    "total": 2
                  },
                  "ok": true,
                  "query": "The meaning of life the universe and everything"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "No query passed",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["search:read"]
          }
        ]
      }
    },
    "/stars.add": {
      "post": {
        "tags": ["stars"],
        "description": "Adds a star to an item.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/stars.add"
        },
        "operationId": "stars_add",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `stars:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."
                  },
                  "file": {
                    "type": "string",
                    "description": "File to add star to."
                  },
                  "file_comment": {
                    "type": "string",
                    "description": "File comment to add star to."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to add star to."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."
                  },
                  "file": {
                    "type": "string",
                    "description": "File to add star to."
                  },
                  "file_comment": {
                    "type": "string",
                    "description": "File comment to add star to."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to add star to."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "stars.add schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from stars.add method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "stars.add error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from stars.add method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["stars:write"]
          }
        ]
      }
    },
    "/stars.list": {
      "get": {
        "tags": ["stars"],
        "description": "Lists stars for a user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/stars.list"
        },
        "operationId": "stars_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `stars:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "stars.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from stars.list method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "stars.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from stars.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["stars:read"]
          }
        ]
      }
    },
    "/stars.remove": {
      "post": {
        "tags": ["stars"],
        "description": "Removes a star from an item.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/stars.remove"
        },
        "operationId": "stars_remove",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `stars:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."
                  },
                  "file": {
                    "type": "string",
                    "description": "File to remove star from."
                  },
                  "file_comment": {
                    "type": "string",
                    "description": "File comment to remove star from."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to remove star from."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "channel": {
                    "type": "string",
                    "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."
                  },
                  "file": {
                    "type": "string",
                    "description": "File to remove star from."
                  },
                  "file_comment": {
                    "type": "string",
                    "description": "File comment to remove star from."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "Timestamp of the message to remove star from."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "stars.remove schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from stars.remove method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "stars.remove error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from stars.remove method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["stars:write"]
          }
        ]
      }
    },
    "/team.accessLogs": {
      "get": {
        "tags": ["team"],
        "description": "Gets the access logs for the current team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.accessLogs"
        },
        "operationId": "team_accessLogs",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "End of time range of logs to include in results (inclusive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response demonstrates pagination and two access log entries.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.accessLogs schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from team.accessLogs method"
                },
                "example": {
                  "logins": [
                    {
                      "count": 1,
                      "country": "US",
                      "date_first": 1422922864,
                      "date_last": 1422922864,
                      "ip": "127.0.0.1",
                      "isp": "BigCo ISP",
                      "region": "CA",
                      "user_agent": "SlackWeb Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.35 Safari/537.36",
                      "user_id": "U45678",
                      "username": "alice"
                    },
                    {
                      "count": 1,
                      "country": "US",
                      "date_first": 1422922493,
                      "date_last": 1422922493,
                      "ip": "127.0.0.1",
                      "isp": "BigCo ISP",
                      "region": "CA",
                      "user_agent": "SlackWeb Mozilla/5.0 (iPhone; CPU iPhone OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4",
                      "user_id": "U12345",
                      "username": "white_rabbit"
                    }
                  ],
                  "ok": true,
                  "paging": {
                    "count": 100,
                    "page": 1,
                    "pages": 1,
                    "total": 2
                  }
                }
              }
            }
          },
          "default": {
            "description": "A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown:",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.accessLogs error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from team.accessLogs method"
                },
                "example": {
                  "error": "paid_only",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin"]
          }
        ]
      }
    },
    "/team.billableInfo": {
      "get": {
        "tags": ["team"],
        "description": "Gets billable users information for the current team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.billableInfo"
        },
        "operationId": "team_billableInfo",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "A user to retrieve the billable information for. Defaults to all users.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "billable_info": {
                    "U02UCPE1R": {
                      "billing_active": true
                    },
                    "U02UEBSD2": {
                      "billing_active": true
                    },
                    "U0632EWRW": {
                      "billing_active": false
                    }
                  },
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin"]
          }
        ]
      }
    },
    "/team.info": {
      "get": {
        "tags": ["team"],
        "description": "Gets information about the current team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.info"
        },
        "operationId": "team_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `team:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "query",
            "description": "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.info schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from team.info method"
                },
                "example": {
                  "ok": true,
                  "team": {
                    "domain": "example",
                    "email_domain": "example.com",
                    "enterprise_id": "E1234A12AB",
                    "enterprise_name": "Umbrella Corporation",
                    "icon": {
                      "image_102": "https://...",
                      "image_132": "https://...",
                      "image_34": "https://...",
                      "image_44": "https://...",
                      "image_68": "https://...",
                      "image_88": "https://...",
                      "image_default": true
                    },
                    "id": "T12345",
                    "name": "My Team"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from team.info method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["team:read"]
          }
        ]
      }
    },
    "/team.integrationLogs": {
      "get": {
        "tags": ["team"],
        "description": "Gets the integration logs for the current team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.integrationLogs"
        },
        "operationId": "team_integrationLogs",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `admin`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "in": "query",
            "description": "Filter logs to this Slack app. Defaults to all logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "change_type",
            "in": "query",
            "description": "Filter logs with this change type. Defaults to all logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Filter logs to this service. Defaults to all logs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Filter logs generated by this user’s actions. Defaults to all logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.integrationLogs schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from team.integrationLogs method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.integrationLogs error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from team.integrationLogs method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["admin"]
          }
        ]
      }
    },
    "/team.profile.get": {
      "get": {
        "tags": ["team.profile", "team"],
        "description": "Retrieve a team's profile.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/team.profile.get"
        },
        "operationId": "team_profile_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users.profile:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Filter by visibility.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.profile.get success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from team.profile.get method"
                },
                "example": {
                  "ok": true,
                  "profile": {
                    "fields": [
                      {
                        "hint": "Enter the extension to reach your desk",
                        "id": "Xf06054AAA",
                        "is_hidden": 1,
                        "label": "Phone extension",
                        "ordering": 0,
                        "type": "text"
                      },
                      {
                        "hint": "When you were born",
                        "id": "Xf06054BBB",
                        "label": "Date of birth",
                        "ordering": 1,
                        "type": "date"
                      },
                      {
                        "hint": "Enter a link to your Facebook profile",
                        "id": "Xf06054CCC",
                        "label": "Facebook",
                        "ordering": 2,
                        "type": "link"
                      },
                      {
                        "hint": "Hogwarts, obviously",
                        "id": "Xf06054DDD",
                        "label": "House",
                        "ordering": 3,
                        "possible_values": ["Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin"],
                        "type": "options_list"
                      },
                      {
                        "hint": "Office location (LDAP)",
                        "id": "Xf06054EEE",
                        "label": "Location",
                        "options": {
                          "is_protected": 1
                        },
                        "ordering": 4,
                        "type": "text"
                      },
                      {
                        "hint": "The boss",
                        "id": "Xf06054FFF",
                        "label": "Manager",
                        "ordering": 5,
                        "type": "user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "team.profile.get error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from team.profile.get method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users.profile:read"]
          }
        ]
      }
    },
    "/usergroups.create": {
      "post": {
        "tags": ["usergroups"],
        "description": "Create a User Group",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.create"
        },
        "operationId": "usergroups_create",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["name"],
                "properties": {
                  "channels": {
                    "type": "string",
                    "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the User Group."
                  },
                  "handle": {
                    "type": "string",
                    "description": "A mention handle. Must be unique among channels, users and User Groups."
                  },
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in each User Group."
                  },
                  "name": {
                    "type": "string",
                    "description": "A name for the User Group. Must be unique among User Groups."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["name"],
                "properties": {
                  "channels": {
                    "type": "string",
                    "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the User Group."
                  },
                  "handle": {
                    "type": "string",
                    "description": "A mention handle. Must be unique among channels, users and User Groups."
                  },
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in each User Group."
                  },
                  "name": {
                    "type": "string",
                    "description": "A name for the User Group. Must be unique among User Groups."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.create schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.create method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.create error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.create method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:write"]
          }
        ]
      }
    },
    "/usergroups.disable": {
      "post": {
        "tags": ["usergroups"],
        "description": "Disable an existing User Group",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.disable"
        },
        "operationId": "usergroups_disable",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["usergroup"],
                "properties": {
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to disable."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["usergroup"],
                "properties": {
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to disable."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.disable schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.disable method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.disable error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.disable method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:write"]
          }
        ]
      }
    },
    "/usergroups.enable": {
      "post": {
        "tags": ["usergroups"],
        "description": "Enable a User Group",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.enable"
        },
        "operationId": "usergroups_enable",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["usergroup"],
                "properties": {
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to enable."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["usergroup"],
                "properties": {
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to enable."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.enable schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.enable method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.enable error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.enable method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:write"]
          }
        ]
      }
    },
    "/usergroups.list": {
      "get": {
        "tags": ["usergroups"],
        "description": "List all User Groups for a team",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.list"
        },
        "operationId": "usergroups_list",
        "parameters": [
          {
            "name": "include_users",
            "in": "query",
            "description": "Include the list of users for each User Group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `usergroups:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_count",
            "in": "query",
            "description": "Include the number of users in each User Group.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_disabled",
            "in": "query",
            "description": "Include disabled User Groups.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.list method"
                },
                "example": {
                  "ok": true,
                  "usergroups": [
                    {
                      "auto_type": "admin",
                      "created_by": "USLACKBOT",
                      "date_create": 1446598059,
                      "date_delete": 0,
                      "date_update": 1446670362,
                      "description": "A group of all Administrators on your team.",
                      "handle": "admins",
                      "id": "S0614TZR7",
                      "is_external": false,
                      "is_usergroup": true,
                      "name": "Team Admins",
                      "prefs": {
                        "channels": [],
                        "groups": []
                      },
                      "team_id": "T060RNRCH",
                      "updated_by": "U060RNRCZ",
                      "user_count": "2"
                    },
                    {
                      "auto_type": "owner",
                      "created_by": "USLACKBOT",
                      "date_create": 1446678371,
                      "date_delete": 0,
                      "date_update": 1446678371,
                      "description": "A group of all Owners on your team.",
                      "handle": "owners",
                      "id": "S06158AV7",
                      "is_external": false,
                      "is_usergroup": true,
                      "name": "Team Owners",
                      "prefs": {
                        "channels": [],
                        "groups": []
                      },
                      "team_id": "T060RNRCH",
                      "updated_by": "USLACKBOT",
                      "user_count": "1"
                    },
                    {
                      "created_by": "U060RNRCZ",
                      "date_create": 1446746793,
                      "date_delete": 1446748865,
                      "date_update": 1446747767,
                      "description": "Marketing gurus, PR experts and product advocates.",
                      "handle": "marketing-team",
                      "id": "S0615G0KT",
                      "is_external": false,
                      "is_usergroup": true,
                      "name": "Marketing Team",
                      "prefs": {
                        "channels": [],
                        "groups": []
                      },
                      "team_id": "T060RNRCH",
                      "updated_by": "U060RNRCZ",
                      "user_count": "0"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:read"]
          }
        ]
      }
    },
    "/usergroups.update": {
      "post": {
        "tags": ["usergroups"],
        "description": "Update an existing User Group",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.update"
        },
        "operationId": "usergroups_update",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["usergroup"],
                "properties": {
                  "handle": {
                    "type": "string",
                    "description": "A mention handle. Must be unique among channels, users and User Groups."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the User Group."
                  },
                  "channels": {
                    "type": "string",
                    "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
                  },
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to update."
                  },
                  "name": {
                    "type": "string",
                    "description": "A name for the User Group. Must be unique among User Groups."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["usergroup"],
                "properties": {
                  "handle": {
                    "type": "string",
                    "description": "A mention handle. Must be unique among channels, users and User Groups."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the User Group."
                  },
                  "channels": {
                    "type": "string",
                    "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
                  },
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to update."
                  },
                  "name": {
                    "type": "string",
                    "description": "A name for the User Group. Must be unique among User Groups."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.update schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.update method"
                },
                "example": {
                  "ok": true,
                  "usergroup": {
                    "created_by": "U060R4BJ4",
                    "date_create": 1447096577,
                    "date_delete": 0,
                    "date_update": 1447102109,
                    "description": "Marketing gurus, PR experts and product advocates.",
                    "handle": "marketing-team",
                    "id": "S0616NG6M",
                    "is_external": false,
                    "is_usergroup": true,
                    "name": "Marketing Team",
                    "prefs": {
                      "channels": [],
                      "groups": []
                    },
                    "team_id": "T060R4BHN",
                    "updated_by": "U060R4BJ4",
                    "user_count": 1,
                    "users": ["U060R4BJ4", "U060RNRCZ"]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.update error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.update method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:write"]
          }
        ]
      }
    },
    "/usergroups.users.list": {
      "get": {
        "tags": ["usergroups.users", "usergroups"],
        "description": "List all users in a User Group",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.users.list"
        },
        "operationId": "usergroups_users_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `usergroups:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_disabled",
            "in": "query",
            "description": "Allow results that involve disabled User Groups.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "usergroup",
            "in": "query",
            "description": "The encoded ID of the User Group to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard success response when used with a user token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.users.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.users.list method"
                },
                "example": {
                  "ok": true,
                  "users": ["U060R4BJ4", "W123A4BC5"]
                }
              }
            }
          },
          "default": {
            "description": "Standard failure response when used with an invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.users.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.users.list method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:read"]
          }
        ]
      }
    },
    "/usergroups.users.update": {
      "post": {
        "tags": ["usergroups.users", "usergroups"],
        "description": "Update the list of users for a User Group",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/usergroups.users.update"
        },
        "operationId": "usergroups_users_update",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `usergroups:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["usergroup", "users"],
                "properties": {
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to update."
                  },
                  "users": {
                    "type": "string",
                    "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["usergroup", "users"],
                "properties": {
                  "include_count": {
                    "type": "boolean",
                    "description": "Include the number of users in the User Group."
                  },
                  "usergroup": {
                    "type": "string",
                    "description": "The encoded ID of the User Group to update."
                  },
                  "users": {
                    "type": "string",
                    "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.users.update schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from usergroups.users.update method"
                },
                "example": {
                  "ok": true,
                  "usergroup": {
                    "created_by": "U060R4BJ4",
                    "date_create": 1447096577,
                    "date_delete": 0,
                    "date_update": 1447102109,
                    "description": "Marketing gurus, PR experts and product advocates.",
                    "handle": "marketing-team",
                    "id": "S0616NG6M",
                    "is_external": false,
                    "is_usergroup": true,
                    "name": "Marketing Team",
                    "prefs": {
                      "channels": [],
                      "groups": []
                    },
                    "team_id": "T060R4BHN",
                    "updated_by": "U060R4BJ4",
                    "user_count": 1,
                    "users": ["U060R4BJ4", "U060RNRCZ"]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "usergroups.users.update error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from usergroups.users.update method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["usergroups:write"]
          }
        ]
      }
    },
    "/users.conversations": {
      "get": {
        "tags": ["users"],
        "description": "List conversations the calling user may access.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.conversations"
        },
        "operationId": "users_conversations",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `conversations:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_archived",
            "in": "query",
            "description": "Set to `true` to exclude archived channels from the list",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.conversations success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`"
                },
                "example": {
                  "channels": [
                    {
                      "created": 1449252889,
                      "creator": "U012A3CDE",
                      "id": "C012AB3CD",
                      "is_archived": false,
                      "is_channel": true,
                      "is_ext_shared": false,
                      "is_general": true,
                      "is_group": false,
                      "is_im": false,
                      "is_mpim": false,
                      "is_org_shared": false,
                      "is_pending_ext_shared": false,
                      "is_private": false,
                      "is_shared": false,
                      "name": "general",
                      "name_normalized": "general",
                      "pending_shared": [],
                      "previous_names": [],
                      "purpose": {
                        "creator": "",
                        "last_set": 0,
                        "value": "This channel is for team-wide communication and announcements. All team members are in this channel."
                      },
                      "topic": {
                        "creator": "",
                        "last_set": 0,
                        "value": "Company-wide announcements and work-based matters"
                      },
                      "unlinked": 0
                    },
                    {
                      "created": 1449252889,
                      "creator": "U061F7AUR",
                      "id": "C061EG9T2",
                      "is_archived": false,
                      "is_channel": true,
                      "is_ext_shared": false,
                      "is_general": false,
                      "is_group": false,
                      "is_im": false,
                      "is_mpim": false,
                      "is_org_shared": false,
                      "is_pending_ext_shared": false,
                      "is_private": false,
                      "is_shared": false,
                      "name": "random",
                      "name_normalized": "random",
                      "pending_shared": [],
                      "previous_names": [],
                      "purpose": {
                        "creator": "",
                        "last_set": 0,
                        "value": "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."
                      },
                      "topic": {
                        "creator": "",
                        "last_set": 0,
                        "value": "Non-work banter and water cooler conversation"
                      },
                      "unlinked": 0
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "dGVhbTpDMDYxRkE1UEI="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.conversations error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.conversations method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]
          }
        ]
      }
    },
    "/users.deletePhoto": {
      "post": {
        "tags": ["users"],
        "description": "Delete the user profile photo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.deletePhoto"
        },
        "operationId": "users_deletePhoto",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `users.profile:write`"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.deletePhoto schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.deletePhoto method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.deletePhoto error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.deletePhoto method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users.profile:write"]
          }
        ]
      }
    },
    "/users.getPresence": {
      "get": {
        "tags": ["users"],
        "description": "Gets user presence information.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.getPresence"
        },
        "operationId": "users_getPresence",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "User to get presence info on. Defaults to the authed user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When requesting information for a different user, this method just returns the current presence (either `active` or `away`).",
            "content": {
              "application/json": {
                "schema": {
                  "title": "API method: users.getPresence",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65"
                },
                "example": {
                  "ok": true,
                  "presence": "active"
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.counts error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Schema for error response users.getPresence method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:read"]
          }
        ]
      }
    },
    "/users.identity": {
      "get": {
        "tags": ["users"],
        "description": "Get a user's identity.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.identity"
        },
        "operationId": "users_identity",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `identity.basic`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You will receive at a minimum the following information:",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.identity schema",
                  "type": "object",
                  "description": "Schema for successful response from users.identity method"
                },
                "example": {
                  "ok": true,
                  "team": {
                    "id": "T0G9PQBBK"
                  },
                  "user": {
                    "id": "U0G9QF9C6",
                    "name": "Sonny Whether"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.identity error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.identity method"
                },
                "example": {
                  "error": "account_inactive",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["identity.basic"]
          }
        ]
      }
    },
    "/users.info": {
      "get": {
        "tags": ["users"],
        "description": "Gets information about a user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.info"
        },
        "operationId": "users_info",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_locale",
            "in": "query",
            "description": "Set this to `true` to receive the locale for this user. Defaults to `false`",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "User to get info on",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.info success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.info method"
                },
                "example": {
                  "ok": true,
                  "user": {
                    "color": "9f69e7",
                    "deleted": false,
                    "has_2fa": false,
                    "id": "W012A3CDE",
                    "is_admin": true,
                    "is_app_user": false,
                    "is_bot": false,
                    "is_owner": false,
                    "is_primary_owner": false,
                    "is_restricted": false,
                    "is_ultra_restricted": false,
                    "name": "spengler",
                    "profile": {
                      "avatar_hash": "ge3b51ca72de",
                      "display_name": "spengler",
                      "display_name_normalized": "spengler",
                      "email": "spengler@ghostbusters.example.com",
                      "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_original": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "real_name": "Egon Spengler",
                      "real_name_normalized": "Egon Spengler",
                      "status_emoji": ":books:",
                      "status_text": "Print is dead",
                      "team": "T012AB3C4"
                    },
                    "real_name": "Egon Spengler",
                    "team_id": "T012AB3C4",
                    "tz": "America/Los_Angeles",
                    "tz_label": "Pacific Daylight Time",
                    "tz_offset": -25200,
                    "updated": 1502138686
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.info error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.info method"
                },
                "example": {
                  "error": "user_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:read"]
          }
        ]
      }
    },
    "/users.list": {
      "get": {
        "tags": ["users"],
        "description": "Lists all users in a Slack team.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.list"
        },
        "operationId": "users_list",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users:read`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_locale",
            "in": "query",
            "description": "Set this to `true` to receive the locale for users. Defaults to `false`",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.list schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.list method"
                },
                "example": {
                  "cache_ts": 1498777272,
                  "members": [
                    {
                      "color": "9f69e7",
                      "deleted": false,
                      "has_2fa": false,
                      "id": "W012A3CDE",
                      "is_admin": true,
                      "is_app_user": false,
                      "is_bot": false,
                      "is_owner": false,
                      "is_primary_owner": false,
                      "is_restricted": false,
                      "is_ultra_restricted": false,
                      "name": "spengler",
                      "profile": {
                        "avatar_hash": "ge3b51ca72de",
                        "display_name": "spengler",
                        "display_name_normalized": "spengler",
                        "email": "spengler@ghostbusters.example.com",
                        "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "real_name": "Egon Spengler",
                        "real_name_normalized": "Egon Spengler",
                        "status_emoji": ":books:",
                        "status_text": "Print is dead",
                        "team": "T012AB3C4"
                      },
                      "real_name": "spengler",
                      "team_id": "T012AB3C4",
                      "tz": "America/Los_Angeles",
                      "tz_label": "Pacific Daylight Time",
                      "tz_offset": -25200,
                      "updated": 1502138686
                    },
                    {
                      "color": "9f69e7",
                      "deleted": false,
                      "has_2fa": false,
                      "id": "W07QCRPA4",
                      "is_admin": true,
                      "is_bot": false,
                      "is_owner": false,
                      "is_primary_owner": false,
                      "is_restricted": false,
                      "is_ultra_restricted": false,
                      "name": "glinda",
                      "profile": {
                        "avatar_hash": "8fbdd10b41c6",
                        "display_name": "Glinda the Fairly Good",
                        "display_name_normalized": "Glinda the Fairly Good",
                        "email": "glenda@south.oz.coven",
                        "first_name": "Glinda",
                        "image_1024": "https://a.slack-edge.com...png",
                        "image_192": "https://a.slack-edge.com...png",
                        "image_24": "https://a.slack-edge.com...png",
                        "image_32": "https://a.slack-edge.com...png",
                        "image_48": "https://a.slack-edge.com...png",
                        "image_512": "https://a.slack-edge.com...png",
                        "image_72": "https://a.slack-edge.com...png",
                        "image_original": "https://a.slack-edge.com...png",
                        "last_name": "Southgood",
                        "phone": "",
                        "real_name": "Glinda Southgood",
                        "real_name_normalized": "Glinda Southgood",
                        "skype": "",
                        "title": "Glinda the Good"
                      },
                      "real_name": "Glinda Southgood",
                      "team_id": "T0G9PQBBK",
                      "tz": "America/Los_Angeles",
                      "tz_label": "Pacific Daylight Time",
                      "tz_offset": -25200,
                      "updated": 1480527098
                    }
                  ],
                  "ok": true,
                  "response_metadata": {
                    "next_cursor": "dXNlcjpVMEc5V0ZYTlo="
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.list error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.list method"
                },
                "example": {
                  "error": "invalid_cursor",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:read"]
          }
        ]
      }
    },
    "/users.lookupByEmail": {
      "get": {
        "tags": ["users"],
        "description": "Find a user with an email address.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.lookupByEmail"
        },
        "operationId": "users_lookupByEmail",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users:read.email`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "An email address belonging to a user in the workspace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.lookupByEmail success schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.lookupByEmail method"
                },
                "example": {
                  "ok": true,
                  "user": {
                    "color": "9f69e7",
                    "deleted": false,
                    "has_2fa": false,
                    "id": "W012A3CDE",
                    "is_admin": true,
                    "is_app_user": false,
                    "is_bot": false,
                    "is_owner": false,
                    "is_primary_owner": false,
                    "is_restricted": false,
                    "is_ultra_restricted": false,
                    "name": "spengler",
                    "profile": {
                      "avatar_hash": "ge3b51ca72de",
                      "display_name": "spengler",
                      "display_name_normalized": "spengler",
                      "email": "spengler@ghostbusters.example.com",
                      "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                      "real_name": "Egon Spengler",
                      "real_name_normalized": "Egon Spengler",
                      "status_emoji": ":books:",
                      "status_text": "Print is dead",
                      "team": "T012AB3C4"
                    },
                    "real_name": "Egon Spengler",
                    "team_id": "T012AB3C4",
                    "tz": "America/Los_Angeles",
                    "tz_label": "Pacific Daylight Time",
                    "tz_offset": -25200,
                    "updated": 1502138686
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.lookupByEmail error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.lookupByEmail method"
                },
                "example": {
                  "error": "users_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:read.email"]
          }
        ]
      }
    },
    "/users.profile.get": {
      "get": {
        "tags": ["users.profile", "users"],
        "description": "Retrieves a user's profile information.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.profile.get"
        },
        "operationId": "users_profile_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Authentication token. Requires scope: `users.profile:read`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_labels",
            "in": "query",
            "description": "Include labels for each ID in custom profile fields",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "User to retrieve profile info for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.profile.get schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.profile.get method"
                },
                "example": {
                  "ok": true,
                  "profile": {
                    "avatar_hash": "ge3b51ca72de",
                    "display_name": "spengler",
                    "display_name_normalized": "spengler",
                    "email": "spengler@ghostbusters.example.com",
                    "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_original": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "real_name": "Egon Spengler",
                    "real_name_normalized": "Egon Spengler",
                    "status_emoji": ":books:",
                    "status_expiration": 0,
                    "status_text": "Print is dead",
                    "team": "T012AB3C4"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.profile.get error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.profile.get method"
                },
                "example": {
                  "error": "user_not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users.profile:read"]
          }
        ]
      }
    },
    "/users.profile.set": {
      "post": {
        "tags": ["users.profile", "users"],
        "description": "Set the profile information for a user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.profile.set"
        },
        "operationId": "users_profile_set",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `users.profile:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a single key to set. Usable only if `profile` is not passed."
                  },
                  "profile": {
                    "type": "string",
                    "description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."
                  },
                  "user": {
                    "type": "string",
                    "description": "ID of user to change. This argument may only be specified by team admins on paid teams."
                  },
                  "value": {
                    "type": "string",
                    "description": "Value to set a single key to. Usable only if `profile` is not passed."
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a single key to set. Usable only if `profile` is not passed."
                  },
                  "profile": {
                    "type": "string",
                    "description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."
                  },
                  "user": {
                    "type": "string",
                    "description": "ID of user to change. This argument may only be specified by team admins on paid teams."
                  },
                  "value": {
                    "type": "string",
                    "description": "Value to set a single key to. Usable only if `profile` is not passed."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.profile.set schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.profile.set method"
                },
                "example": {
                  "ok": true,
                  "profile": {
                    "avatar_hash": "ge3b51ca72de",
                    "display_name": "spengler",
                    "display_name_normalized": "spengler",
                    "email": "spengler@ghostbusters.example.com",
                    "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                    "real_name": "Egon Spengler",
                    "real_name_normalized": "Egon Spengler",
                    "status_emoji": ":books:",
                    "status_expiration": 0,
                    "status_text": "Print is dead",
                    "team": "T012AB3C4"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.profile.set error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.profile.set method"
                },
                "example": {
                  "error": "invalid_profile",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users.profile:write"]
          }
        ]
      }
    },
    "/users.setActive": {
      "post": {
        "tags": ["users"],
        "description": "Marked a user as active. Deprecated and non-functional.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.setActive"
        },
        "operationId": "users_setActive",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.setActive schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.setActive method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.setActive error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.setActive method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:write"]
          }
        ]
      }
    },
    "/users.setPhoto": {
      "post": {
        "tags": ["users"],
        "description": "Set the user profile photo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.setPhoto"
        },
        "operationId": "users_setPhoto",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["token"],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Authentication token. Requires scope: `users.profile:write`"
                  },
                  "crop_w": {
                    "type": "string",
                    "description": "Width/height of crop box (always square)"
                  },
                  "crop_x": {
                    "type": "string",
                    "description": "X coordinate of top-left corner of crop box"
                  },
                  "crop_y": {
                    "type": "string",
                    "description": "Y coordinate of top-left corner of crop box"
                  },
                  "image": {
                    "type": "string",
                    "description": "File contents via `multipart/form-data`."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.setPhoto schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.setPhoto method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.setPhoto error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.setPhoto method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users.profile:write"]
          }
        ]
      }
    },
    "/users.setPresence": {
      "post": {
        "tags": ["users"],
        "description": "Manually sets user presence.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/users.setPresence"
        },
        "operationId": "users_setPresence",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `users:write`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": ["presence"],
                "properties": {
                  "presence": {
                    "type": "string",
                    "description": "Either `auto` or `away`"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "required": ["presence"],
                "properties": {
                  "presence": {
                    "type": "string",
                    "description": "Either `auto` or `away`"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.setPresence schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for successful response from users.setPresence method"
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "users.setPresence error schema",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "Schema for error response from users.setPresence method"
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["users:write"]
          }
        ]
      }
    },
    "/views.open": {
      "get": {
        "tags": ["views"],
        "description": "Open a view for a user.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.open"
        },
        "operationId": "views_open",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger_id",
            "in": "query",
            "description": "Exchange a trigger to post to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the opened view payload.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "view": {
                    "app_id": "AA4928AQ",
                    "blocks": [
                      {
                        "block_id": "a_block_id",
                        "element": {
                          "action_id": "an_action_id",
                          "type": "plain_text_input"
                        },
                        "label": {
                          "emoji": true,
                          "text": "A simple label",
                          "type": "plain_text"
                        },
                        "optional": false,
                        "type": "input"
                      }
                    ],
                    "bot_id": "BA13894H",
                    "callback_id": "identify_your_modals",
                    "clear_on_close": false,
                    "external_id": "",
                    "hash": "156772938.1827394",
                    "id": "VMHU10V25",
                    "notify_on_close": false,
                    "private_metadata": "Shh it is a secret",
                    "root_view_id": "VMHU10V25",
                    "state": {
                      "values": {}
                    },
                    "submit": {
                      "text": "Create",
                      "type": "plain_text"
                    },
                    "team_id": "T8N4K1JN",
                    "title": {
                      "text": "Quite a plain modal",
                      "type": "plain_text"
                    },
                    "type": "modal"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_arguments",
                  "ok": false,
                  "response_metadata": {
                    "messages": ["invalid `trigger_id`"]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/views.publish": {
      "get": {
        "tags": ["views"],
        "description": "Publish a static view for a User.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.publish"
        },
        "operationId": "views_publish",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "`id` of the user you want publish a view to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hash",
            "in": "query",
            "description": "A string that represents view state to protect against possible race conditions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the published view payload.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "view": {
                    "app_id": "AA4928AQ",
                    "blocks": [
                      {
                        "block_id": "2WGp9",
                        "text": {
                          "text": "A simple section with some sample sentence.",
                          "type": "mrkdwn",
                          "verbatim": false
                        },
                        "type": "section"
                      }
                    ],
                    "bot_id": "BA13894H",
                    "callback_id": "identify_your_home_tab",
                    "clear_on_close": false,
                    "external_id": "",
                    "hash": "156772938.1827394",
                    "id": "VMHU10V25",
                    "notify_on_close": false,
                    "private_metadata": "Shh it is a secret",
                    "root_view_id": "VMHU10V25",
                    "state": {
                      "values": {}
                    },
                    "team_id": "T8N4K1JN",
                    "type": "home"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response, before getting to any possible validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_arguments",
                  "ok": false,
                  "response_metadata": {
                    "messages": ["invalid `user_id`"]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/views.push": {
      "get": {
        "tags": ["views"],
        "description": "Push a view onto the stack of a root view.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.push"
        },
        "operationId": "views_push",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger_id",
            "in": "query",
            "description": "Exchange a trigger to post to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the pushed view payload.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "view": {
                    "app_id": "AAD3351BQ",
                    "blocks": [
                      {
                        "block_id": "edit_details",
                        "element": {
                          "action_id": "detail_input",
                          "type": "plain_text_input"
                        },
                        "label": {
                          "text": "Edit details",
                          "type": "plain_text"
                        },
                        "type": "input"
                      }
                    ],
                    "bot_id": "BADF7A34H",
                    "callback_id": "view_4",
                    "clear_on_close": true,
                    "close": {
                      "emoji": true,
                      "text": "Back",
                      "type": "plain_text"
                    },
                    "external_id": "",
                    "hash": "1569362015.55b5e41b",
                    "id": "VNM522E2U",
                    "notify_on_close": false,
                    "private_metadata": "",
                    "root_view_id": "VNN729E3U",
                    "state": {
                      "values": {}
                    },
                    "submit": {
                      "emoji": true,
                      "text": "Save",
                      "type": "plain_text"
                    },
                    "team_id": "T9M4RL1JM",
                    "title": {
                      "emoji": true,
                      "text": "Pushed Modal",
                      "type": "plain_text"
                    },
                    "type": "modal"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_arguments",
                  "ok": false,
                  "response_metadata": {
                    "messages": ["missing required field: title"]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/views.update": {
      "get": {
        "tags": ["views"],
        "description": "Update an existing view.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/views.update"
        },
        "operationId": "views_update",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `none`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view_id",
            "in": "query",
            "description": "A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_id",
            "in": "query",
            "description": "A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "view",
            "in": "query",
            "description": "A [view object](/reference/surfaces/views). This must be a JSON-encoded string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hash",
            "in": "query",
            "description": "A string that represents view state to protect against possible race conditions.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response includes the updated view payload.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true,
                  "view": {
                    "app_id": "AAD3351BQ",
                    "blocks": [
                      {
                        "accessory": {
                          "action_id": "button_4",
                          "text": {
                            "text": "Click me",
                            "type": "plain_text"
                          },
                          "type": "button"
                        },
                        "block_id": "s_block",
                        "text": {
                          "emoji": true,
                          "text": "I am but an updated modal",
                          "type": "plain_text"
                        },
                        "type": "section"
                      }
                    ],
                    "bot_id": "BADF7A34H",
                    "callback_id": "view_2",
                    "clear_on_close": true,
                    "close": {
                      "emoji": true,
                      "text": "Close",
                      "type": "plain_text"
                    },
                    "external_id": "",
                    "hash": "1569262015.55b5e41b",
                    "id": "VNM522E2U",
                    "notify_on_close": false,
                    "private_metadata": "",
                    "root_view_id": "VNN729E3U",
                    "state": {
                      "values": {}
                    },
                    "team_id": "T9M4RL1JM",
                    "title": {
                      "emoji": true,
                      "text": "Updated Modal",
                      "type": "plain_text"
                    },
                    "type": "modal"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Typical error response.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "not_found",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["none"]
          }
        ]
      }
    },
    "/workflows.stepCompleted": {
      "get": {
        "tags": ["workflows"],
        "description": "Indicate that an app's step in a workflow completed execution.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/workflows.stepCompleted"
        },
        "operationId": "workflows_stepCompleted",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `workflow.steps:execute`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflow_step_execute_id",
            "in": "query",
            "description": "Context identifier that maps to the correct workflow step execution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputs",
            "in": "query",
            "description": "Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["workflow.steps:execute"]
          }
        ]
      }
    },
    "/workflows.stepFailed": {
      "get": {
        "tags": ["workflows"],
        "description": "Indicate that an app's step in a workflow failed to execute.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/workflows.stepFailed"
        },
        "operationId": "workflows_stepFailed",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `workflow.steps:execute`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflow_step_execute_id",
            "in": "query",
            "description": "Context identifier that maps to the correct workflow step execution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error",
            "in": "query",
            "description": "A JSON-based object with a `message` property that should contain a human readable error message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["workflow.steps:execute"]
          }
        ]
      }
    },
    "/workflows.updateStep": {
      "get": {
        "tags": ["workflows"],
        "description": "Update the configuration for a workflow extension step.",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://api.slack.com/methods/workflows.updateStep"
        },
        "operationId": "workflows_updateStep",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "Authentication token. Requires scope: `workflow.steps:execute`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflow_step_edit_id",
            "in": "query",
            "description": "A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inputs",
            "in": "query",
            "description": "A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputs",
            "in": "query",
            "description": "An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step_name",
            "in": "query",
            "description": "An optional field that can be used to override the step name that is shown in the Workflow Builder.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step_image_url",
            "in": "query",
            "description": "An optional field that can be used to override app image that is shown in the Workflow Builder.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Typical success response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default success template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "ok": true
                }
              }
            }
          },
          "default": {
            "description": "Typical error response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Default error template",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  },
                  "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."
                },
                "example": {
                  "error": "invalid_auth",
                  "ok": false
                }
              }
            }
          }
        },
        "security": [
          {
            "slackAuth": ["workflow.steps:execute"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "blocks": {
        "title": "Block Kit blocks",
        "type": "array",
        "description": "This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.",
        "items": {
          "required": ["type"],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          }
        }
      },
      "defs_app_id": {
        "title": "App ID",
        "pattern": "^A[A-Z0-9]{1,}$",
        "type": "string"
      },
      "defs_bot_id": {
        "title": "Bot User ID",
        "pattern": "^B[A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_channel": {
        "title": "Channel-like conversation ID",
        "pattern": "^[CGD][A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_channel_id": {
        "title": "Channel ID",
        "pattern": "^[C][A-Z0-9]{2,}$",
        "type": "string"
      },
      "defs_channel_name": {
        "title": "Name of a channel",
        "type": "string"
      },
      "defs_comment_id": {
        "title": "File Comment ID",
        "pattern": "^Fc[A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_dm_id": {
        "title": "Direct Message Channel ID",
        "pattern": "^[D][A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_enterprise_id": {
        "title": "Enterprise ID",
        "pattern": "^[E][A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_enterprise_name": {
        "title": "Name of the enterprise org",
        "type": "string"
      },
      "defs_enterprise_user_id": {
        "title": "Enterprise User ID",
        "pattern": "^[WU][A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_file_id": {
        "title": "File ID",
        "pattern": "^[F][A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_group_id": {
        "title": "Private Channel ID",
        "pattern": "^[G][A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_ok_false": {
        "title": "default failure response",
        "type": "boolean",
        "enum": [false]
      },
      "defs_ok_true": {
        "title": "default success response",
        "type": "boolean",
        "enum": [true]
      },
      "defs_optional_app_id": {
        "title": "App ID or empty string",
        "pattern": "^(A[A-Z0-9]{1,})?$",
        "type": "string"
      },
      "defs_pinned_info": {
        "title": "Info for a pinned item",
        "type": "object"
      },
      "defs_reminder_id": {
        "title": "Reminder ID",
        "pattern": "^Rm[A-Z0-9]{8,}$",
        "type": "string"
      },
      "defs_subteam_id": {
        "title": "Subteam ID",
        "pattern": "^S[A-Z0-9]{2,}$",
        "type": "string"
      },
      "defs_team": {
        "title": "Team ID",
        "pattern": "^[T][A-Z0-9]{2,}$",
        "type": "string"
      },
      "defs_topic_purpose_creator": {
        "title": "User ID or empty string, used for topic and purpose creation",
        "pattern": "^[UW][A-Z0-9]{8,}$|^$",
        "type": "string"
      },
      "defs_ts": {
        "title": "Timestamp in format 0123456789.012345",
        "pattern": "^\\d{10}\\.\\d{6}$",
        "type": "string"
      },
      "defs_user_id": {
        "title": "User ID",
        "pattern": "^[UW][A-Z0-9]{2,}$",
        "type": "string"
      },
      "defs_workspace_id": {
        "title": "Team or Enterprise ID",
        "pattern": "^[TE][A-Z0-9]{8,}$",
        "type": "string"
      },
      "objs_bot_profile": {
        "title": "Bot Profile Object",
        "required": ["app_id", "deleted", "icons", "id", "name", "team_id", "updated"],
        "type": "object",
        "properties": {
          "app_id": {
            "$ref": "#/components/schemas/defs_app_id"
          },
          "deleted": {
            "type": "boolean"
          },
          "icons": {
            "required": ["image_36", "image_48", "image_72"],
            "type": "object",
            "properties": {
              "image_36": {
                "type": "string",
                "format": "uri"
              },
              "image_48": {
                "type": "string",
                "format": "uri"
              },
              "image_72": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "id": {
            "$ref": "#/components/schemas/defs_bot_id"
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "$ref": "#/components/schemas/defs_team"
          },
          "updated": {
            "type": "integer"
          }
        }
      },
      "objs_channel": {
        "title": "Channel Object",
        "required": [
          "created",
          "creator",
          "id",
          "is_channel",
          "is_mpim",
          "is_org_shared",
          "is_private",
          "is_shared",
          "members",
          "name",
          "name_normalized",
          "purpose",
          "topic"
        ],
        "type": "object",
        "properties": {
          "accepted_user": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "created": {
            "type": "integer"
          },
          "creator": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "id": {
            "$ref": "#/components/schemas/defs_channel_id"
          },
          "is_archived": {
            "type": "boolean"
          },
          "is_channel": {
            "type": "boolean"
          },
          "is_frozen": {
            "type": "boolean"
          },
          "is_general": {
            "type": "boolean"
          },
          "is_member": {
            "type": "boolean"
          },
          "is_moved": {
            "type": "integer"
          },
          "is_mpim": {
            "type": "boolean"
          },
          "is_non_threadable": {
            "type": "boolean"
          },
          "is_org_shared": {
            "type": "boolean"
          },
          "is_pending_ext_shared": {
            "type": "boolean"
          },
          "is_private": {
            "type": "boolean"
          },
          "is_read_only": {
            "type": "boolean"
          },
          "is_shared": {
            "type": "boolean"
          },
          "is_thread_only": {
            "type": "boolean"
          },
          "last_read": {
            "$ref": "#/components/schemas/defs_ts"
          },
          "latest": {
            "type": "object"
          },
          "members": {
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_user_id"
            }
          },
          "name": {
            "type": "string"
          },
          "name_normalized": {
            "type": "string"
          },
          "num_members": {
            "type": "integer"
          },
          "pending_shared": {
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_team"
            }
          },
          "previous_names": {
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_channel_name"
            }
          },
          "priority": {
            "type": "number"
          },
          "purpose": {
            "required": ["creator", "last_set", "value"],
            "type": "object",
            "properties": {
              "creator": {
                "$ref": "#/components/schemas/defs_topic_purpose_creator"
              },
              "last_set": {
                "type": "integer"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "topic": {
            "required": ["creator", "last_set", "value"],
            "type": "object",
            "properties": {
              "creator": {
                "$ref": "#/components/schemas/defs_topic_purpose_creator"
              },
              "last_set": {
                "type": "integer"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "unlinked": {
            "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
            "type": "integer"
          },
          "unread_count": {
            "type": "integer"
          },
          "unread_count_display": {
            "type": "integer"
          }
        }
      },
      "objs_comment": {
        "title": "File Comment Object",
        "required": ["comment", "created", "id", "is_intro", "timestamp", "user"],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "created": {
            "type": "integer"
          },
          "id": {
            "$ref": "#/components/schemas/defs_comment_id"
          },
          "is_intro": {
            "type": "boolean"
          },
          "is_starred": {
            "type": "boolean"
          },
          "num_stars": {
            "type": "integer"
          },
          "pinned_info": {
            "$ref": "#/components/schemas/defs_pinned_info"
          },
          "pinned_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_channel"
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objs_reaction"
            }
          },
          "timestamp": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/defs_user_id"
          }
        }
      },
      "objs_comments": {
        "title": "file comments object",
        "type": "array",
        "items": {
          "type": "object"
        }
      },
      "objs_conversation": {
        "type": "object"
      },
      "objs_enterprise_user": {
        "required": ["enterprise_id", "enterprise_name", "id", "is_admin", "is_owner", "teams"],
        "type": "object",
        "properties": {
          "enterprise_id": {
            "$ref": "#/components/schemas/defs_enterprise_id"
          },
          "enterprise_name": {
            "$ref": "#/components/schemas/defs_enterprise_name"
          },
          "id": {
            "$ref": "#/components/schemas/defs_enterprise_user_id"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_owner": {
            "type": "boolean"
          },
          "teams": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_team"
            }
          }
        }
      },
      "objs_external_org_migrations": {
        "title": "External Org Migrations",
        "required": ["current", "date_updated"],
        "type": "object",
        "properties": {
          "current": {
            "type": "array",
            "items": {
              "required": ["date_started", "team_id"],
              "type": "object",
              "properties": {
                "date_started": {
                  "type": "integer"
                },
                "team_id": {
                  "type": "string"
                }
              }
            }
          },
          "date_updated": {
            "type": "integer"
          }
        }
      },
      "objs_file": {
        "title": "file object",
        "type": "object",
        "properties": {
          "channels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_channel_id"
            }
          },
          "comments_count": {
            "type": "integer"
          },
          "created": {
            "type": "integer"
          },
          "date_delete": {
            "type": "integer"
          },
          "display_as_bot": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          },
          "editor": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "external_id": {
            "type": "string"
          },
          "external_type": {
            "type": "string"
          },
          "external_url": {
            "type": "string",
            "format": "uri"
          },
          "filetype": {
            "type": "string"
          },
          "groups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_group_id"
            }
          },
          "has_rich_preview": {
            "type": "boolean"
          },
          "id": {
            "$ref": "#/components/schemas/defs_file_id"
          },
          "image_exif_rotation": {
            "type": "integer"
          },
          "ims": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_dm_id"
            }
          },
          "is_external": {
            "type": "boolean"
          },
          "is_public": {
            "type": "boolean"
          },
          "is_starred": {
            "type": "boolean"
          },
          "is_tombstoned": {
            "type": "boolean"
          },
          "last_editor": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "mimetype": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "non_owner_editable": {
            "type": "boolean"
          },
          "num_stars": {
            "type": "integer"
          },
          "original_h": {
            "type": "integer"
          },
          "original_w": {
            "type": "integer"
          },
          "permalink": {
            "type": "string",
            "format": "uri"
          },
          "permalink_public": {
            "type": "string",
            "format": "uri"
          },
          "pinned_info": {
            "$ref": "#/components/schemas/defs_pinned_info"
          },
          "pinned_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_channel"
            }
          },
          "pretty_type": {
            "type": "string"
          },
          "preview": {
            "type": "string"
          },
          "public_url_shared": {
            "type": "boolean"
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objs_reaction"
            }
          },
          "shares": {
            "type": "object",
            "properties": {
              "private": {
                "type": "object"
              },
              "public": {
                "type": "object"
              }
            }
          },
          "size": {
            "type": "integer"
          },
          "source_team": {
            "$ref": "#/components/schemas/defs_team"
          },
          "state": {
            "type": "string"
          },
          "thumb_1024": {
            "type": "string",
            "format": "uri"
          },
          "thumb_1024_h": {
            "type": "integer"
          },
          "thumb_1024_w": {
            "type": "integer"
          },
          "thumb_160": {
            "type": "string",
            "format": "uri"
          },
          "thumb_360": {
            "type": "string",
            "format": "uri"
          },
          "thumb_360_h": {
            "type": "integer"
          },
          "thumb_360_w": {
            "type": "integer"
          },
          "thumb_480": {
            "type": "string",
            "format": "uri"
          },
          "thumb_480_h": {
            "type": "integer"
          },
          "thumb_480_w": {
            "type": "integer"
          },
          "thumb_64": {
            "type": "string",
            "format": "uri"
          },
          "thumb_720": {
            "type": "string",
            "format": "uri"
          },
          "thumb_720_h": {
            "type": "integer"
          },
          "thumb_720_w": {
            "type": "integer"
          },
          "thumb_80": {
            "type": "string",
            "format": "uri"
          },
          "thumb_800": {
            "type": "string",
            "format": "uri"
          },
          "thumb_800_h": {
            "type": "integer"
          },
          "thumb_800_w": {
            "type": "integer"
          },
          "thumb_960": {
            "type": "string",
            "format": "uri"
          },
          "thumb_960_h": {
            "type": "integer"
          },
          "thumb_960_w": {
            "type": "integer"
          },
          "thumb_tiny": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "updated": {
            "type": "integer"
          },
          "url_private": {
            "type": "string",
            "format": "uri"
          },
          "url_private_download": {
            "type": "string",
            "format": "uri"
          },
          "user": {
            "type": "string"
          },
          "user_team": {
            "$ref": "#/components/schemas/defs_team"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "objs_icon": {
        "type": "object",
        "properties": {
          "image_102": {
            "type": "string"
          },
          "image_132": {
            "type": "string"
          },
          "image_230": {
            "type": "string"
          },
          "image_34": {
            "type": "string"
          },
          "image_44": {
            "type": "string"
          },
          "image_68": {
            "type": "string"
          },
          "image_88": {
            "type": "string"
          },
          "image_default": {
            "type": "boolean"
          }
        }
      },
      "objs_message": {
        "title": "Message object",
        "required": ["text", "ts", "type"],
        "type": "object",
        "properties": {
          "attachments": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "required": ["id"],
              "type": "object",
              "properties": {
                "fallback": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "image_bytes": {
                  "type": "integer"
                },
                "image_height": {
                  "type": "integer"
                },
                "image_url": {
                  "type": "string"
                },
                "image_width": {
                  "type": "integer"
                }
              }
            }
          },
          "blocks": {
            "$ref": "#/components/schemas/blocks"
          },
          "bot_id": {
            "type": "object"
          },
          "bot_profile": {
            "$ref": "#/components/schemas/objs_bot_profile"
          },
          "client_msg_id": {
            "type": "string"
          },
          "comment": {
            "$ref": "#/components/schemas/objs_comment"
          },
          "display_as_bot": {
            "type": "boolean"
          },
          "file": {
            "$ref": "#/components/schemas/objs_file"
          },
          "files": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objs_file"
            }
          },
          "icons": {
            "type": "object",
            "properties": {
              "emoji": {
                "type": "string"
              },
              "image_64": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "inviter": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "is_delayed_message": {
            "type": "boolean"
          },
          "is_intro": {
            "type": "boolean"
          },
          "is_starred": {
            "type": "boolean"
          },
          "last_read": {
            "$ref": "#/components/schemas/defs_ts"
          },
          "latest_reply": {
            "$ref": "#/components/schemas/defs_ts"
          },
          "name": {
            "type": "string"
          },
          "old_name": {
            "type": "string"
          },
          "parent_user_id": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "permalink": {
            "type": "string",
            "format": "uri"
          },
          "pinned_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_channel"
            }
          },
          "purpose": {
            "type": "string"
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objs_reaction"
            }
          },
          "reply_count": {
            "type": "integer"
          },
          "reply_users": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_user_id"
            }
          },
          "reply_users_count": {
            "type": "integer"
          },
          "source_team": {
            "$ref": "#/components/schemas/defs_workspace_id"
          },
          "subscribed": {
            "type": "boolean"
          },
          "subtype": {
            "type": "string"
          },
          "team": {
            "$ref": "#/components/schemas/defs_workspace_id"
          },
          "text": {
            "type": "string"
          },
          "thread_ts": {
            "$ref": "#/components/schemas/defs_ts"
          },
          "topic": {
            "type": "string"
          },
          "ts": {
            "$ref": "#/components/schemas/defs_ts"
          },
          "type": {
            "type": "string"
          },
          "unread_count": {
            "type": "integer"
          },
          "upload": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "user_profile": {
            "$ref": "#/components/schemas/objs_user_profile_short"
          },
          "user_team": {
            "$ref": "#/components/schemas/defs_workspace_id"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "objs_paging": {
        "title": "paging object",
        "required": ["page", "total"],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "pages": {
            "type": "integer"
          },
          "per_page": {
            "type": "integer"
          },
          "spill": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "objs_primary_owner": {
        "required": ["email", "id"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "objs_reaction": {
        "title": "Reaction object",
        "required": ["count", "name", "users"],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_user_id"
            }
          }
        }
      },
      "objs_reminder": {
        "required": ["creator", "id", "recurring", "text", "user"],
        "type": "object",
        "properties": {
          "complete_ts": {
            "type": "integer"
          },
          "creator": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "id": {
            "$ref": "#/components/schemas/defs_reminder_id"
          },
          "recurring": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/defs_user_id"
          }
        }
      },
      "objs_resources": {
        "title": "resources in info from apps.permissions.info",
        "required": ["ids"],
        "type": "object",
        "properties": {
          "excluded_ids": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "wildcard": {
            "type": "boolean"
          }
        }
      },
      "objs_response_metadata": {
        "type": "object"
      },
      "objs_scopes": {
        "type": "array",
        "items": {
          "title": "Named OAuth scopes",
          "type": "string"
        }
      },
      "objs_subteam": {
        "title": "Subteam/Usergroup Object",
        "required": [
          "auto_provision",
          "auto_type",
          "created_by",
          "date_create",
          "date_delete",
          "date_update",
          "deleted_by",
          "description",
          "enterprise_subteam_id",
          "handle",
          "id",
          "is_external",
          "is_subteam",
          "is_usergroup",
          "name",
          "prefs",
          "team_id",
          "updated_by"
        ],
        "type": "object",
        "properties": {
          "auto_provision": {
            "type": "boolean"
          },
          "auto_type": {
            "type": "object"
          },
          "channel_count": {
            "type": "integer"
          },
          "created_by": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "date_create": {
            "type": "integer"
          },
          "date_delete": {
            "type": "integer"
          },
          "date_update": {
            "type": "integer"
          },
          "deleted_by": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "enterprise_subteam_id": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/defs_subteam_id"
          },
          "is_external": {
            "type": "boolean"
          },
          "is_subteam": {
            "type": "boolean"
          },
          "is_usergroup": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "prefs": {
            "required": ["channels", "groups"],
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/defs_channel_id"
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/defs_group_id"
                }
              }
            }
          },
          "team_id": {
            "$ref": "#/components/schemas/defs_team"
          },
          "updated_by": {
            "$ref": "#/components/schemas/defs_user_id"
          },
          "user_count": {
            "type": "integer"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/defs_user_id"
            }
          }
        }
      },
      "objs_team": {
        "title": "Team Object",
        "required": ["domain", "email_domain", "icon", "id", "name"],
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "avatar_base_url": {
            "type": "string",
            "format": "uri"
          },
          "created": {
            "type": "integer"
          },
          "date_create": {
            "type": "integer"
          },
          "deleted": {
            "type": "boolean"
          },
          "discoverable": {
            "type": "object"
          },
          "domain": {
            "type": "string"
          },
          "email_domain": {
            "type": "string"
          },
          "enterprise_id": {
            "$ref": "#/components/schemas/defs_enterprise_id"
          },
          "enterprise_name": {
            "$ref": "#/components/schemas/defs_enterprise_name"
          },
          "external_org_migrations": {
            "$ref": "#/components/schemas/objs_external_org_migrations"
          },
          "has_compliance_export": {
            "type": "boolean"
          },
          "icon": {
            "$ref": "#/components/schemas/objs_icon"
          },
          "id": {
            "$ref": "#/components/schemas/defs_workspace_id"
          },
          "is_assigned": {
            "type": "boolean"
          },
          "is_enterprise": {
            "type": "integer"
          },
          "is_over_storage_limit": {
            "type": "boolean"
          },
          "limit_ts": {
            "type": "integer"
          },
          "locale": {
            "type": "string"
          },
          "messages_count": {
            "type": "integer"
          },
          "msg_edit_window_mins": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "over_integrations_limit": {
            "type": "boolean"
          },
          "over_storage_limit": {
            "type": "boolean"
          },
          "pay_prod_cur": {
            "type": "string"
          },
          "plan": {
            "type": "string",
            "enum": ["", "std", "plus", "compliance", "enterprise"]
          },
          "primary_owner": {
            "$ref": "#/components/schemas/objs_primary_owner"
          },
          "sso_provider": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        }
      },
      "objs_team_profile_field": {
        "required": ["hint", "id", "label", "ordering", "type"],
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "id": {
            "pattern": "^X[a-zA-Z0-9]{9,}$",
            "type": "string"
          },
          "is_hidden": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "options": {
            "type": "object"
          },
          "ordering": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": ["text", "date", "link", "mailto", "options_list", "user"]
          }
        }
      },
      "objs_team_profile_field_option": {
        "type": "object"
      },
      "objs_user": {
        "type": "object"
      },
      "objs_user_profile": {
        "title": "User profile object",
        "required": [
          "avatar_hash",
          "display_name",
          "display_name_normalized",
          "phone",
          "real_name",
          "real_name_normalized",
          "skype",
          "status_emoji",
          "status_text",
          "title"
        ],
        "type": "object",
        "properties": {
          "always_active": {
            "type": "boolean"
          },
          "api_app_id": {
            "$ref": "#/components/schemas/defs_optional_app_id"
          },
          "avatar_hash": {
            "type": "string"
          },
          "bot_id": {
            "$ref": "#/components/schemas/defs_bot_id"
          },
          "display_name": {
            "type": "string"
          },
          "display_name_normalized": {
            "type": "string"
          },
          "is_app_user": {
            "type": "boolean"
          },
          "is_custom_image": {
            "type": "boolean"
          },
          "last_avatar_image_hash": {
            "type": "string"
          },
          "memberships_count": {
            "type": "integer"
          },
          "phone": {
            "type": "string"
          },
          "pronouns": {
            "type": "string"
          },
          "real_name": {
            "type": "string"
          },
          "real_name_normalized": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "status_default_emoji": {
            "type": "string"
          },
          "status_default_text": {
            "type": "string"
          },
          "status_emoji": {
            "type": "string"
          },
          "status_expiration": {
            "type": "integer"
          },
          "status_text": {
            "type": "string"
          },
          "team": {
            "$ref": "#/components/schemas/defs_workspace_id"
          },
          "title": {
            "type": "string"
          },
          "updated": {
            "type": "integer"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "objs_user_profile_short": {
        "required": [
          "avatar_hash",
          "display_name",
          "image_72",
          "is_restricted",
          "is_ultra_restricted",
          "name",
          "real_name",
          "team"
        ],
        "type": "object",
        "properties": {
          "avatar_hash": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "display_name_normalized": {
            "type": "string"
          },
          "image_72": {
            "type": "string",
            "format": "uri"
          },
          "is_restricted": {
            "type": "boolean"
          },
          "is_ultra_restricted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "real_name": {
            "type": "string"
          },
          "real_name_normalized": {
            "type": "string"
          },
          "team": {
            "$ref": "#/components/schemas/defs_workspace_id"
          }
        }
      }
    },
    "securitySchemes": {
      "slackAuth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://slack.com/oauth/authorize",
            "tokenUrl": "https://slack.com/api/oauth.access",
            "scopes": {
              "admin": "admin",
              "admin.apps:read": "admin.apps:read",
              "admin.apps:write": "admin.apps:write",
              "admin.conversations:read": "admin.conversations:read",
              "admin.conversations:write": "admin.conversations:write",
              "admin.invites:read": "admin.invites:read",
              "admin.invites:write": "admin.invites:write",
              "admin.teams:read": "admin.teams:read",
              "admin.teams:write": "admin.teams:write",
              "admin.usergroups:read": "admin.usergroups:read",
              "admin.usergroups:write": "admin.usergroups:write",
              "admin.users:read": "admin.users:read",
              "admin.users:write": "admin.users:write",
              "authorizations:read": "authorizations:read",
              "bot": "Bot user scope",
              "calls:read": "calls:read",
              "calls:write": "calls:write",
              "channels:history": "channels:history",
              "channels:manage": "channels:manage",
              "channels:read": "channels:read",
              "channels:write": "channels:write",
              "chat:write": "chat:write",
              "chat:write:bot": "Author messages as a bot",
              "chat:write:user": "Author messages as a user",
              "conversations:history": "conversations:history",
              "conversations:read": "conversations:read",
              "conversations:write": "conversations:write",
              "dnd:read": "dnd:read",
              "dnd:write": "dnd:write",
              "emoji:read": "emoji:read",
              "files:read": "files:read",
              "files:write:user": "files:write:user",
              "groups:history": "groups:history",
              "groups:read": "groups:read",
              "groups:write": "groups:write",
              "identity.basic": "identity.basic",
              "im:history": "im:history",
              "im:read": "im:read",
              "im:write": "im:write",
              "links:write": "links:write",
              "mpim:history": "mpim:history",
              "mpim:read": "mpim:read",
              "mpim:write": "mpim:write",
              "none": "No scope required",
              "pins:read": "pins:read",
              "pins:write": "pins:write",
              "reactions:read": "reactions:read",
              "reactions:write": "reactions:write",
              "reminders:read": "reminders:read",
              "reminders:write": "reminders:write",
              "remote_files:read": "remote_files:read",
              "remote_files:share": "remote_files:share",
              "remote_files:write": "remote_files:write",
              "rtm:stream": "rtm:stream",
              "search:read": "search:read",
              "stars:read": "stars:read",
              "stars:write": "stars:write",
              "team:read": "team:read",
              "tokens.basic": "tokens.basic",
              "usergroups:read": "usergroups:read",
              "usergroups:write": "usergroups:write",
              "users.profile:read": "users.profile:read",
              "users.profile:write": "users.profile:write",
              "users:read": "users:read",
              "users:read.email": "users:read.email",
              "users:write": "users:write",
              "workflow.steps:execute": "workflow.steps:execute"
            }
          }
        }
      }
    }
  }
}
